/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 * 
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 * 
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * ParametersDistanceMapping.java
 *
 * Created on 22 de Agosto de 2007, 16:36
 */
package visualizer.graph.coodination;

import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import visualizer.corpus.Corpus;
import visualizer.corpus.CorpusFactory;
import visualizer.matrix.Matrix;
import visualizer.textprocessing.Preprocessor;
import visualizer.projection.ProjectionData;
import visualizer.textprocessing.stemmer.StemmerType;
import visualizer.textprocessing.transformation.MatrixTransformationType;
import visualizer.view.Viewer;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class CorpusParametersDistanceMapping extends javax.swing.JDialog {

    /** Creates new form ParametersDistanceMapping */
    private CorpusParametersDistanceMapping(java.awt.Dialog parent) {
        super(parent);
        this.setModal(true);
        initComponents();
        
        for (StemmerType st : StemmerType.getTypes()) {
            this.stemmerComboBox.addItem(st);
        }

        for (MatrixTransformationType mtt : MatrixTransformationType.getTypes()) {
            this.matrixtransfComboBox.addItem(mtt);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        distanceButtonGroup = new javax.swing.ButtonGroup();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        projPanel = new javax.swing.JPanel();
        preProcessingPanel = new javax.swing.JPanel();
        luhnLabel = new javax.swing.JLabel();
        gramsComboBox = new javax.swing.JComboBox();
        gramsLabel = new javax.swing.JLabel();
        luhnLowerTextField = new javax.swing.JTextField();
        luhnUpperLabel = new javax.swing.JLabel();
        luhnUpperTextField = new javax.swing.JTextField();
        stemmerComboBox = new javax.swing.JComboBox();
        matrixTypePanel = new javax.swing.JPanel();
        matrixtransfComboBox = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mapping Parameters");

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        projPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Projection"));
        projPanel.setLayout(new java.awt.GridBagLayout());

        preProcessingPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Parameters"));
        preProcessingPanel.setLayout(new java.awt.GridBagLayout());

        luhnLabel.setText("Luhn's lower cut");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel.add(luhnLabel, gridBagConstraints);

        gramsComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel.add(gramsComboBox, gridBagConstraints);

        gramsLabel.setText("Number of grams");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel.add(gramsLabel, gridBagConstraints);

        luhnLowerTextField.setColumns(5);
        luhnLowerTextField.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel.add(luhnLowerTextField, gridBagConstraints);

        luhnUpperLabel.setText("Luhn's upper cut");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel.add(luhnUpperLabel, gridBagConstraints);

        luhnUpperTextField.setColumns(5);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel.add(luhnUpperTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        preProcessingPanel.add(stemmerComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        projPanel.add(preProcessingPanel, gridBagConstraints);

        matrixTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Matrix Transformation"));
        matrixTypePanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        matrixTypePanel.add(matrixtransfComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        projPanel.add(matrixTypePanel, gridBagConstraints);

        getContentPane().add(projPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        try {
            ProjectionData pData = (ProjectionData) this.graph.getGraph().getProjectionData().clone();

            this.refreshData(pData);
                        
            Corpus cp = CorpusFactory.getInstance(fileName, pData);
            Preprocessor pp = new Preprocessor(cp);
            this.matrix = pp.getMatrix(pData.getLunhLowerCut(), pData.getLunhUpperCut(), pData.getNumberGrams(), pData.getStemmer(), pData.isUseStopword());
            
            this.setVisible(false);
        } catch (CloneNotSupportedException ex) {
            Logger.getLogger(CorpusParametersDistanceMapping.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            ex.printStackTrace();
        }
}//GEN-LAST:event_okButtonActionPerformed

    public static CorpusParametersDistanceMapping getInstance(javax.swing.JDialog parent) {
        return new CorpusParametersDistanceMapping(parent);
    }

    public void display(Viewer graph, String fileName) {
        this.graph = graph;
        this.fileName = fileName;

        this.setData(graph.getGraph().getProjectionData());

        this.projPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Projection [" + graph.getId() + "]"));

        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    public void setData(ProjectionData pData) {
        this.stemmerComboBox.setSelectedItem(pData.getStemmer());
        this.luhnLowerTextField.setText(Integer.toString(pData.getLunhLowerCut()));
        this.matrixtransfComboBox.setSelectedItem(pData.getMatrixTransformationType());
        this.gramsComboBox.setSelectedIndex(pData.getNumberGrams() - 1);

        if (pData.getLunhUpperCut() > 0) {
            this.luhnUpperTextField.setText(Integer.toString(pData.getLunhUpperCut()));
        } else {
            this.luhnUpperTextField.setText("");
        }
    }

    public void refreshData(ProjectionData pData) {
        pData.setStemmer((StemmerType) this.stemmerComboBox.getSelectedItem());
        pData.setUseStopword(true);
        pData.setUseWeight(false);
        pData.setLunhLowerCut(Integer.parseInt(this.luhnLowerTextField.getText()));
        pData.setMatrixTransformationType((MatrixTransformationType) this.matrixtransfComboBox.getSelectedItem());
        pData.setNumberGrams(this.gramsComboBox.getSelectedIndex() + 1);

        if (this.luhnUpperTextField.getText().trim().length() > 0) {
            pData.setLunhUpperCut(Integer.parseInt(this.luhnUpperTextField.getText()));
        } else {
            pData.setLunhUpperCut(-1);
        }
    }

    public Matrix getMatrix() {
        return this.matrix;
    }
    
    public Vector<String> getAttributes(){
        return this.attributes;
    }
    
    private Viewer graph;
    private Matrix matrix;
    private Vector<String> attributes;
    private String fileName;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.ButtonGroup distanceButtonGroup;
    private javax.swing.JComboBox gramsComboBox;
    private javax.swing.JLabel gramsLabel;
    private javax.swing.JLabel luhnLabel;
    private javax.swing.JTextField luhnLowerTextField;
    private javax.swing.JLabel luhnUpperLabel;
    private javax.swing.JTextField luhnUpperTextField;
    private javax.swing.JPanel matrixTypePanel;
    private javax.swing.JComboBox matrixtransfComboBox;
    private javax.swing.JButton okButton;
    private javax.swing.JPanel preProcessingPanel;
    private javax.swing.JPanel projPanel;
    private javax.swing.JComboBox stemmerComboBox;
    // End of variables declaration//GEN-END:variables
}
