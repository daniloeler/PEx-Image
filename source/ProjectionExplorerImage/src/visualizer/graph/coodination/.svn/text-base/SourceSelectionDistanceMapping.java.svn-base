/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 * 
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 * 
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * ParametersDistanceMapping.java
 *
 * Created on 22 de Agosto de 2007, 16:36
 */
package visualizer.graph.coodination;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import visualizer.projection.ProjectionData;
import visualizer.projection.SourceType;
import visualizer.util.OpenDialog;
import visualizer.util.SaveDialog;
import visualizer.util.PointsReader;
import visualizer.view.Viewer;
import visualizer.util.filefilter.DATAFilter;
import visualizer.util.filefilter.ZIPFilter;

/**
 *
 * @author  Gabriel de Faria Andery
 */
public class SourceSelectionDistanceMapping extends javax.swing.JDialog {

    /** Creates new form ParametersDistanceMapping */
    private SourceSelectionDistanceMapping(java.awt.Dialog parent) {
        super(parent);
        this.setModal(true);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sourceButtonGroup = new javax.swing.ButtonGroup();
        buttonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        dataSourcePanel = new javax.swing.JPanel();
        imageRadioButton = new javax.swing.JRadioButton();
        pointsRadioButton = new javax.swing.JRadioButton();
        imageTextField = new javax.swing.JTextField();
        pointsTextField = new javax.swing.JTextField();
        imageButton = new javax.swing.JButton();
        pointsButton = new javax.swing.JButton();
        corporaRadioButton = new javax.swing.JRadioButton();
        corporaTextField = new javax.swing.JTextField();
        corporaButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("");

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        okButton.setText("Ok");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        dataSourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose the Data Source"));
        dataSourcePanel.setLayout(new java.awt.GridBagLayout());

        sourceButtonGroup.add(imageRadioButton);
        imageRadioButton.setText("Images File");
        imageRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        imageRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        imageRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataSourcePanel.add(imageRadioButton, gridBagConstraints);

        sourceButtonGroup.add(pointsRadioButton);
        pointsRadioButton.setSelected(true);
        pointsRadioButton.setText("Points File");
        pointsRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pointsRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pointsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataSourcePanel.add(pointsRadioButton, gridBagConstraints);

        imageTextField.setColumns(35);
        imageTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataSourcePanel.add(imageTextField, gridBagConstraints);

        pointsTextField.setColumns(35);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataSourcePanel.add(pointsTextField, gridBagConstraints);

        imageButton.setText("Search...");
        imageButton.setEnabled(false);
        imageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imageButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataSourcePanel.add(imageButton, gridBagConstraints);

        pointsButton.setText("Search...");
        pointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataSourcePanel.add(pointsButton, gridBagConstraints);

        sourceButtonGroup.add(corporaRadioButton);
        corporaRadioButton.setText("Documents");
        corporaRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        corporaRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        corporaRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corporaRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataSourcePanel.add(corporaRadioButton, gridBagConstraints);

        corporaTextField.setColumns(35);
        corporaTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataSourcePanel.add(corporaTextField, gridBagConstraints);

        corporaButton.setText("Search...");
        corporaButton.setEnabled(false);
        corporaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corporaButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataSourcePanel.add(corporaButton, gridBagConstraints);

        getContentPane().add(dataSourcePanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
    this.refreshData();
    
    if (this.fileName.trim().length() <= 0) {
        javax.swing.JOptionPane.showMessageDialog(this,"A image file or points file must be provided!", "Problems", javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    else {
        this.setVisible(false);
    }
}//GEN-LAST:event_okButtonActionPerformed

private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
    this.setVisible(false);
}//GEN-LAST:event_cancelButtonActionPerformed

private void corporaRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corporaRadioButtonActionPerformed
    this.corporaButton.setEnabled(true);
    this.corporaTextField.setEnabled(true);

    this.imageButton.setEnabled(false);
    this.imageTextField.setEnabled(false);

    this.pointsButton.setEnabled(false);
    this.pointsTextField.setEnabled(false);

    this.imageTextField.setText("");
    this.pointsTextField.setText("");
}//GEN-LAST:event_corporaRadioButtonActionPerformed

private void corporaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corporaButtonActionPerformed
    int result = OpenDialog.showOpenDialog(new ZIPFilter(), this);
    
    if (result == JFileChooser.APPROVE_OPTION) {
        String filename = OpenDialog.getFilename();
        this.corporaTextField.setText(filename);
    }
}//GEN-LAST:event_corporaButtonActionPerformed

private void imageRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageRadioButtonActionPerformed
this.imageButton.setEnabled(true);
    this.imageTextField.setEnabled(true);

    this.pointsButton.setEnabled(false);
    this.pointsTextField.setEnabled(false);

    this.corporaButton.setEnabled(false);
    this.corporaTextField.setEnabled(false);

    this.pointsTextField.setText("");
    this.corporaTextField.setText("");
}//GEN-LAST:event_imageRadioButtonActionPerformed

private void imageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imageButtonActionPerformed
int result = OpenDialog.showOpenDialog(new ZIPFilter(), this);
    
    if (result == JFileChooser.APPROVE_OPTION) {
        String filename = OpenDialog.getFilename();
        this.imageTextField.setText(filename);
    }
}//GEN-LAST:event_imageButtonActionPerformed

private void pointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsButtonActionPerformed
int result = OpenDialog.showOpenDialog(new DATAFilter(), this);

    if (result == JFileChooser.APPROVE_OPTION) {
        String filename = OpenDialog.getFilename();
        this.pointsTextField.setText(filename);
    }
}//GEN-LAST:event_pointsButtonActionPerformed

private void pointsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsRadioButtonActionPerformed
this.pointsButton.setEnabled(true);
    this.pointsTextField.setEnabled(true);

    this.imageButton.setEnabled(false);
    this.imageTextField.setEnabled(false);

    this.corporaButton.setEnabled(false);
    this.corporaTextField.setEnabled(false);

    this.imageTextField.setText("");
    this.corporaTextField.setText("");
}//GEN-LAST:event_pointsRadioButtonActionPerformed

    public void refreshData() {
        if (this.imageRadioButton.isSelected()) {
            this.fileName = this.imageTextField.getText();
            this.sourceType = SourceType.IMAGES;
        } else if (this.pointsRadioButton.isSelected()) {
            this.fileName = this.pointsTextField.getText();
            this.sourceType = SourceType.POINTS;
        } else if (this.corporaRadioButton.isSelected()) {
            this.fileName = this.corporaTextField.getText();
            this.sourceType = SourceType.CORPUS;
        }
    }
    
    public static SourceSelectionDistanceMapping getInstance(javax.swing.JDialog parent) {
        return new SourceSelectionDistanceMapping(parent);
    }
    
    public void display(Viewer graph) {
        this.graph = graph;

        this.setLocationRelativeTo(this.getParent());
        this.setTitle("Projection " + graph.getId());
        this.setVisible(true);
    }

    public String getFileName() {
        return fileName;
    }

    public SourceType getSourceType() {
        return sourceType;
    }
    
    private Viewer graph;
    private String fileName;
    private SourceType sourceType;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton corporaButton;
    private javax.swing.JRadioButton corporaRadioButton;
    private javax.swing.JTextField corporaTextField;
    private javax.swing.JPanel dataSourcePanel;
    private javax.swing.JButton imageButton;
    private javax.swing.JRadioButton imageRadioButton;
    private javax.swing.JTextField imageTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JButton pointsButton;
    private javax.swing.JRadioButton pointsRadioButton;
    private javax.swing.JTextField pointsTextField;
    private javax.swing.ButtonGroup sourceButtonGroup;
    // End of variables declaration//GEN-END:variables
}
