/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 * 
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 * 
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * ParametersDistanceMapping.java
 *
 * Created on 22 de Agosto de 2007, 16:36
 */
package visualizer.graph.coodination;

import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import visualizer.featureextraction.ExtractionManager;
import visualizer.matrix.DenseMatrix;
import visualizer.matrix.DenseVector;
import visualizer.matrix.Matrix;
import visualizer.matrix.MatrixFactory;
import visualizer.matrix.normalization.Normalization;
import visualizer.matrix.normalization.NormalizationFactory;
import visualizer.projection.SourceType;
import visualizer.projection.distance.DissimilarityType;
import visualizer.util.SystemPropertiesManager;
import visualizer.util.Util;
import visualizer.view.Viewer;

/**
 *
 * @author  Gabriel de Faria Andery
 */
public class ParametersDistanceMapping extends javax.swing.JDialog {
    
    /** Creates new form ParametersDistanceMapping */
    private ParametersDistanceMapping(java.awt.Dialog parent) {
        super(parent);
        this.setModal(true);
        initComponents();
        
        for (DissimilarityType disstype : DissimilarityType.getTypes()) {
            if (disstype != DissimilarityType.KOLMOGOROV && disstype != DissimilarityType.NONE) {
                this.distanceComboBox.addItem(disstype);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        distanceButtonGroup = new javax.swing.ButtonGroup();
        parametersPanel = new javax.swing.JPanel();
        nrNeighborsPanel = new javax.swing.JPanel();
        knnConnectivityLabel = new javax.swing.JLabel();
        knnConnectivityComboBox = new javax.swing.JComboBox();
        chooseDistanceTypePanel = new javax.swing.JPanel();
        spaceLabel1 = new javax.swing.JLabel();
        spaceLabel2 = new javax.swing.JLabel();
        distanceComboBox = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        createButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Mapping Parameters");

        parametersPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Distance Mapping Parameters"));
        parametersPanel.setLayout(new java.awt.GridBagLayout());

        nrNeighborsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Number of Neighbors"));

        knnConnectivityLabel.setText("Number of Neighbors");
        nrNeighborsPanel.add(knnConnectivityLabel);

        knnConnectivityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        knnConnectivityComboBox.setSelectedIndex(1);
        nrNeighborsPanel.add(knnConnectivityComboBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        parametersPanel.add(nrNeighborsPanel, gridBagConstraints);

        chooseDistanceTypePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose the Distance Type"));
        chooseDistanceTypePanel.setLayout(new java.awt.GridBagLayout());

        spaceLabel1.setText("          ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        chooseDistanceTypePanel.add(spaceLabel1, gridBagConstraints);

        spaceLabel2.setText("          ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        chooseDistanceTypePanel.add(spaceLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        chooseDistanceTypePanel.add(distanceComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        parametersPanel.add(chooseDistanceTypePanel, gridBagConstraints);

        getContentPane().add(parametersPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(createButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        int nrNeighbors = this.knnConnectivityComboBox.getSelectedIndex() + 1;
        DissimilarityType metrictype = (DissimilarityType) this.distanceComboBox.getSelectedItem();

        try {
            DistanceMapping mapping = new DistanceMapping(matrix1, matrix2, nrNeighbors, metrictype,
                    this.local, this.outer);
            this.local.getCoordination().addToCoordinate(mapping);
            this.local.updateCoordinations(null);

            this.setVisible(false);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            this.setVisible(false);
        }
    }//GEN-LAST:event_createButtonActionPerformed

    public Matrix setPoints(SourceType sourceType, String fileName, Viewer graph) throws java.io.IOException {
        Matrix matrix = null;
        try {
            if(sourceType == SourceType.IMAGES) {
                float[] cdata = null;
                ArrayList<String> ids = null;
                matrix = new DenseMatrix();
                String unzipDir = SystemPropertiesManager.getInstance().getProperty("UNZIP.DIR");

                Util.deleteFiles(unzipDir);
                Util.unzipImages(fileName);

                //ImageUtil.convertDirToGray(unzipDir);
                ExtractionManager EM = new ExtractionManager(graph.getGraph().getProjectionData(), unzipDir);

                //PointsReader reader = new PointsReader(pdata.getDocsTermsFilename());
                float points[][] = EM.getMatrixPoints();//reader.getPoints();
                cdata = EM.getClassData();// EM.getClasses();// reader.getCdata();
                ids = EM.getNameImages();

                //Construir a DenseMatrix aqui
                for (int i = 0; i < points.length; i++) {
                  matrix.addRow(new DenseVector(points[i], ids.get(i), cdata[i]));
                }

                //normalization
                Normalization norm = NormalizationFactory.getInstance(graph.getGraph().getProjectionData().getNormalization());
                matrix = norm.execute(matrix);

            } else if(sourceType == SourceType.POINTS) {
                matrix = MatrixFactory.getInstance(fileName);
            } else {
                throw new java.io.IOException("Unknow file format!");
            }
            
        } catch (IllegalArgumentException ex) {
            ex.printStackTrace();
        } catch (SecurityException ex) {
            ex.printStackTrace();
        }
        
        return matrix;
    }
    
    public static ParametersDistanceMapping getInstance(javax.swing.JDialog parent) {
        return new ParametersDistanceMapping(parent);
    }

    public void display(Viewer local, Viewer outer) {
        this.local = local;
        this.outer = outer;

        this.setLocationRelativeTo(this.getParent());
        
        SourceSelectionDistanceMapping ssdm = SourceSelectionDistanceMapping.getInstance(this);
        ssdm.display(local);

        if (ssdm.getFileName().trim().length() <= 0) return;

        if(ssdm.getSourceType() == SourceType.CORPUS) {
            CorpusParametersDistanceMapping cpdm = CorpusParametersDistanceMapping.getInstance(this);
            cpdm.display(local, ssdm.getFileName());

            if (cpdm.getMatrix() != null) {
                matrix1 = cpdm.getMatrix();
            }
            else {
                JOptionPane.showMessageDialog(this, "The coordination was not created.", "Information", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        } else {
            try {
                matrix1 = setPoints(ssdm.getSourceType(), ssdm.getFileName(), local);
            }
            catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        ssdm = SourceSelectionDistanceMapping.getInstance(this);
        ssdm.display(outer);
        
        if (ssdm.getFileName().trim().length() <= 0) return;

        if(ssdm.getSourceType() == SourceType.CORPUS) {
            CorpusParametersDistanceMapping cpdm = CorpusParametersDistanceMapping.getInstance(this);
            cpdm.display(outer, ssdm.getFileName());

            if (cpdm.getMatrix() != null) {
                matrix2 = cpdm.getMatrix();
            }
            else {
                JOptionPane.showMessageDialog(this, "The coordination was not created.", "Information", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        } else {
            try {
                matrix2 = setPoints(ssdm.getSourceType(), ssdm.getFileName(), outer);
            }
            catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, e.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
        
        this.setVisible(true);
    }

    private Viewer local;
    private Viewer outer;
    private Matrix matrix1;
    private Matrix matrix2;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel chooseDistanceTypePanel;
    private javax.swing.JButton createButton;
    private javax.swing.ButtonGroup distanceButtonGroup;
    private javax.swing.JComboBox distanceComboBox;
    private javax.swing.JComboBox knnConnectivityComboBox;
    private javax.swing.JLabel knnConnectivityLabel;
    private javax.swing.JPanel nrNeighborsPanel;
    private javax.swing.JPanel parametersPanel;
    private javax.swing.JLabel spaceLabel1;
    private javax.swing.JLabel spaceLabel2;
    // End of variables declaration//GEN-END:variables
}
