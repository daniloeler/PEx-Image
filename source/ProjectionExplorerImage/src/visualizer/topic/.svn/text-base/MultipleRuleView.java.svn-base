/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Roberto Pinho <robertopinho@yahoo.com.br>.
 *
 * Contributor(s): 
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 * MultipleRuleView.java
 *
 * Created on 15 de Outubro de 2007, 13:12
 */
package visualizer.topic;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import visualizer.graph.Graph;
import visualizer.tools.apriori.ItemSet;
import visualizer.tools.apriori.RuleSet;
import visualizer.view.Viewer;

/**
 *
 * @author  robertopinho
 */
public class MultipleRuleView extends javax.swing.JDialog {

    /** Creates new form MultipleRuleView */
    public MultipleRuleView(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.pack();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Código Gerado ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        okjButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ruleTree = new javax.swing.JTree();
        sortComboBox = new javax.swing.JComboBox();
        sortLabel = new javax.swing.JLabel();
        viewButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewEditorPane = new javax.swing.JEditorPane();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(300, 300));
        okjButton.setText("Close");
        okjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okjButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        getContentPane().add(okjButton, gridBagConstraints);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(150, 230));
        ruleTree.setMaximumSize(new java.awt.Dimension(1500, 1500));
        ruleTree.setMinimumSize(new java.awt.Dimension(150, 200));
        ruleTree.setPreferredSize(new java.awt.Dimension(150, 200));
        ruleTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                ruleTreeValueChanged(evt);
            }
        });

        jScrollPane1.setViewportView(ruleTree);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 50;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        sortComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Weight", "Support", "Confidence", "Head" }));
        sortComboBox.setMinimumSize(new java.awt.Dimension(150, 20));
        sortComboBox.setPreferredSize(new java.awt.Dimension(150, 20));
        sortComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortComboBoxActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        getContentPane().add(sortComboBox, gridBagConstraints);

        sortLabel.setText("Sort by:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(sortLabel, gridBagConstraints);

        viewButton.setText(">>");
        viewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        getContentPane().add(viewButton, gridBagConstraints);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setMinimumSize(new java.awt.Dimension(150, 200));
        viewEditorPane.setMinimumSize(new java.awt.Dimension(150, 200));
        viewEditorPane.setPreferredSize(new java.awt.Dimension(150, 200));
        jScrollPane2.setViewportView(viewEditorPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 150;
        gridBagConstraints.ipady = 50;
        getContentPane().add(jScrollPane2, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void viewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewButtonActionPerformed
        displaySelectedNode();
        
    }//GEN-LAST:event_viewButtonActionPerformed

    private void sortComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortComboBoxActionPerformed
        this.loadRules();
    }//GEN-LAST:event_sortComboBoxActionPerformed

    private void ruleTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_ruleTreeValueChanged
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) ruleTree.getLastSelectedPathComponent();

        if (node == null) //Nothing is selected.
        {
            return;
        }

        Object nodeInfo = node.getUserObject();

        displaySelectedNode();
        
        
        
    }//GEN-LAST:event_ruleTreeValueChanged

    private void okjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okjButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_okjButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MultipleRuleView(new javax.swing.JFrame(), true).setVisible(true);
            }

        });
    }

    private static MultipleRuleView instance;
    private DefaultMutableTreeNode top;
    private Graph graph;
    private Topic topic;
    // Declaração de variáveis - não modifique//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton okjButton;
    private javax.swing.JTree ruleTree;
    private javax.swing.JComboBox sortComboBox;
    private javax.swing.JLabel sortLabel;
    private javax.swing.JButton viewButton;
    private javax.swing.JEditorPane viewEditorPane;
    // Fim da declaração de variáveis//GEN-END:variables
    public static MultipleRuleView getInstance(javax.swing.JFrame parent) {
        if (instance == null || instance.getParent() != parent) {
            instance = new MultipleRuleView(parent, true);
        }
        return instance;
    }

    public void display(Viewer gv, Topic topic) {
        this.graph = gv.getGraph();
        this.topic = topic;

        ruleTree.setShowsRootHandles(true);

        this.loadRules();


        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    private void loadRules() {

        top = new DefaultMutableTreeNode("Rules");
        ruleTree.setModel(new DefaultTreeModel(top));


        DefaultMutableTreeNode ruleNode;



        if (((RuleTopic) topic).getTopicData().isGroupTopics()) {

            List<RuleSet> ruleSetList = new ArrayList<RuleSet>();
            for (StringBox box : topic.boxes) {
                ruleSetList.add((RuleSet) box.getUserObject());
            }
            if (sortComboBox.getSelectedIndex() == 0) { //sort by weight
                Collections.sort(ruleSetList, new Comparator<RuleSet>() {

                    public int compare(RuleSet o1, RuleSet o2) {
                        return (new Float(o1.getAvgWeight())).compareTo(
                                new Float(o2.getAvgWeight()));

                    }

                });
            }
            if (sortComboBox.getSelectedIndex() == 1) { //sort by support
                Collections.sort(ruleSetList, new Comparator<RuleSet>() {

                    public int compare(RuleSet o1, RuleSet o2) {
                        return (new Integer(o1.getSupportGlobal())).compareTo(
                                new Integer(o2.getSupportGlobal()));

                    }

                });
            }
            if (sortComboBox.getSelectedIndex() == 2) { //sort by confidence
                Collections.sort(ruleSetList, new Comparator<RuleSet>() {

                    public int compare(RuleSet o1, RuleSet o2) {
                        return (new Float(o1.getMinConfidence())).compareTo(
                                new Float(o2.getMinConfidence()));

                    }

                });
            }

            if (sortComboBox.getSelectedIndex() == 3) { //sort by termSet
                Collections.sort(ruleSetList, new Comparator<RuleSet>() {

                    public int compare(RuleSet o1, RuleSet o2) {
                        return (o1.getTermString().compareTo(
                                o2.getTermString()));

                    }

                });
            }


            for (RuleSet ruleSet : ruleSetList) {
                ruleNode = new DefaultMutableTreeNode(ruleSet);
                for (ItemSet rule : ruleSet.rules) {
                    ruleNode.add(new DefaultMutableTreeNode(rule));
                }

                top.add(ruleNode);
            }



        } else {

            List<ItemSet> itemSetList = new ArrayList<ItemSet>();
            for (StringBox box : topic.boxes) {
                itemSetList.add((ItemSet) box.getUserObject());
            }
            if (sortComboBox.getSelectedIndex() == 0) { //sort by weight
                Collections.sort(itemSetList, Collections.reverseOrder());
            }
            if (sortComboBox.getSelectedIndex() == 1) { //sort by support
                Collections.sort(itemSetList, new Comparator<ItemSet>() {

                    public int compare(ItemSet o1, ItemSet o2) {
                        return (new Integer(o1.getSupport())).compareTo(
                                new Integer(o2.getSupport()));

                    }

                });
            }
            if (sortComboBox.getSelectedIndex() == 2) { //sort by confidence
                Collections.sort(itemSetList, new Comparator<ItemSet>() {

                    public int compare(ItemSet o1, ItemSet o2) {
                        return (new Float(o1.getMaxConfidence())).compareTo(
                                new Float(o2.getMaxConfidence()));

                    }

                });
            }

            if (sortComboBox.getSelectedIndex() == 3) { //sort by head
                Collections.sort(itemSetList, new Comparator<ItemSet>() {

                    public int compare(ItemSet o1, ItemSet o2) {
                        return (o1.getHeadTopic().compareTo(
                                o2.getHeadTopic()));

                    }

                });
            }


            for (ItemSet itemSet : itemSetList) {
                ruleNode = new DefaultMutableTreeNode(itemSet);
                top.add(ruleNode);
            }
        }

        ruleTree.expandPath(new TreePath(top.getPath()));

    }

    private void displaySelectedNode() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) ruleTree.getLastSelectedPathComponent();

        viewEditorPane.setContentType("text/html");

        if (node == null) //Nothing is selected.
        {
            return;
        }

        Object nodeInfo = node.getUserObject();

        if (nodeInfo instanceof RuleSet) {
            StringBuffer sb = new StringBuffer();
            RuleSet rsNode = (RuleSet) nodeInfo;
            TopicData ldata = new TopicData(null);
            ldata.setRuleTopic(true);
            sb.append("Label:<br>");
            sb.append(rsNode.toString());
            ldata.setRuleTopic(false);
            ldata.setPhrase(true);
            sb.append("<br><br>Phrase:<br>");
            sb.append(rsNode.getTopic(ldata));
            ldata.setPhrase(false);
            ldata.setShortPhrase(true);
            sb.append("<br><br>Short Phrase:<br>");
            sb.append(rsNode.getTopic(ldata));

            viewEditorPane.setText(sb.toString());
        }


        if (nodeInfo instanceof ItemSet) {
            StringBuffer sb = new StringBuffer();
            ItemSet isNode = (ItemSet) nodeInfo;
            TopicData ldata = new TopicData(null);
            ldata.setRuleTopic(true);
            sb.append("Rule:<br>");
            sb.append(isNode.getTopic(ldata));
            ldata.setRuleTopic(false);
            ldata.setPhrase(true);
            sb.append("<br><br>Phrase:<br>");
            sb.append(isNode.getTopic(ldata));
            ldata.setPhrase(false);
            ldata.setShortPhrase(true);
            sb.append("<br><br>Short Phrase:<br>");
            sb.append(isNode.getTopic(ldata));

            viewEditorPane.setText(sb.toString());
        }
    }

}
