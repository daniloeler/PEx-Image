/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer for Imaging (PEx-Image).
 *
 * How to cite this work:
 *
 *
 * PEx-Image is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * PEx-Image is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *                 Marcel Yugo Nakazaki <myn@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along
 * with PEx-Image. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */
package visualizer.view;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import visualizer.graph.Graph;
import visualizer.graph.Vertex;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import visualizer.view.MultipleImage.FilePane;

/**
 *
 * @author Fernando Vieira Paulovich
 */
public class MultipleImageView extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form MultipleImageView
     */
    private MultipleImageView(javax.swing.JFrame parent) {
        super(parent);
        initComponents();

        this.imagesModel = new DefaultTableModel() {

            public Class getColumnClass(int columnIndex) {
                return ImageIcon.class;
            }

            public boolean isCellEditable(int row, int col) {
                return false;
            }
        };

        this.imagesModel.addColumn("Images");
        this.imagesModel.addColumn("Images");
        this.imagesModel.addColumn("Images");
        this.imagesModel.addColumn("Images");

        this.imagesTable.setModel(this.imagesModel);
        this.imagesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        this.imagesTable.setRowHeight(200);

        this.pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPanel = new javax.swing.JPanel();
        selImg_jLabel = new javax.swing.JLabel();
        closeButton = new javax.swing.JButton();
        dataPanel = new javax.swing.JPanel();
        imagesScrollPane = new javax.swing.JScrollPane();
        imagesTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Images Multiple View");
        setModal(true);

        selImg_jLabel.setText("Selected Image:");
        buttonPanel.add(selImg_jLabel);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        dataPanel.setLayout(new java.awt.BorderLayout());

        imagesScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Images"));
        imagesScrollPane.setMinimumSize(new java.awt.Dimension(800, 600));
        imagesScrollPane.setPreferredSize(new java.awt.Dimension(800, 600));

        imagesTable.setRowSelectionAllowed(false);
        imagesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imagesTableMouseClicked(evt);
            }
        });
        imagesScrollPane.setViewportView(imagesTable);

        dataPanel.add(imagesScrollPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(dataPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void imagesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imagesTableMouseClicked
        // TODO add your handling code here:
        ImageIcon img = (ImageIcon) imagesModel.getValueAt(imagesTable.getSelectedRow(), imagesTable.getSelectedColumn());
        if (img != null) {
            this.selImg_jLabel.setText("Selected Image: " + img.getDescription());
        } else {
            this.selImg_jLabel.setText("Selected Image: ");
        }
    }//GEN-LAST:event_imagesTableMouseClicked

    public static MultipleImageView getInstance(javax.swing.JFrame parent) {
        if (instance == null || instance.getParent() != parent) {
            instance = new MultipleImageView(parent);
        }
        return instance;
    }

    public void display(Viewer gv, ArrayList<Vertex> vertex) {
        this.vertex = vertex;
        this.graph = gv.getGraph();
        int Size = 0;

        if (vertex != null) {
            //adding images side by side
            int rowcount = this.imagesModel.getRowCount();
            for (int i = rowcount - 1; i >= 0; i--) {
                this.imagesModel.removeRow(i);
            }

            for (int i = 0; i < vertex.size(); i += 4) {
                for (int j = 0; j < 4 && i + j < vertex.size(); j++) {
                    Vertex v = vertex.get(i + j);
                    if (v.isValid()) {
                        Size++;
                    }
                }
            }

            for (int i = 0; i < Size; i += 4) {
                Object[] images = new Object[4];

                for (int j = 0; j < 4 && i + j < Size; j++) {
                    Vertex v = vertex.get(i + j);

                    if (v.isValid()) {
                        try {
                            Image img = graph.getImageCollection().getImage(v.getUrl());
                            BufferedImage bImg = new BufferedImage(img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB);
                            bImg.getGraphics().drawImage(img, 0, 0, null);
                            //Image img = graph.getImageCollection().getImage(v.getUrl());//.getScaledInstance(200, 200, 0);
                            int w = bImg.getWidth(null);
                            int h = bImg.getHeight(null);
                            if (Vertex.isDrawClassOnImage()) {
                                Graphics2D g2 = (Graphics2D) bImg.getGraphics();
                                g2.setStroke(new BasicStroke(10.0f));
                                g2.setColor(v.getColor());
                                g2.drawRect(3, 3, w - 4, h - 4);
                            }                            
                            images[j] = new ImageIcon(bImg.getScaledInstance(200, 200, 0), v.getUrl());
                            //images[j] = new ImageIcon(graph.getImageCollection().getImage(v.getUrl()).getScaledInstance(200, 200, 0));

                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
                this.imagesModel.addRow(images);
            }
        }
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

//    public void display(javax.swing.JFrame parent, GraphViewer gv, Vertex vertex) {
//        java.util.Vector<Vertex> neighbors=new java.util.Vector<Vertex>();
//        String triName=gv.getEdgesName();
//        gv.getGraph().getNeighbors(neighbors,null,triName,vertex,gv.getNeighborhoodDepth());
//        neighbors.insertElementAt(vertex,0);
//        this.show(parent,gv,neighbors);
//    }
    public void display(Viewer gv, Vertex vertex) {
        ArrayList<Vertex> neighbors = new ArrayList<Vertex>();
        gv.getGraph().getNeighbors(neighbors, null, gv.getCurrentConnectivity(),
                vertex, gv.getNeighborhoodDepth());

        if (neighbors.size() > 0) {
            neighbors.set(0, vertex);
        } else {
            neighbors.add(vertex);
        }

        this.display(gv, neighbors);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MultipleImageView(null).setVisible(true);
            }
        });
    }
    private DefaultTableModel imagesModel;
    private FilePane showedFilePane = null;
    private final int numberCharsAtTabTitle = 20;
    private static MultipleImageView instance;
    private ArrayList<Vertex> vertex;
    //private javax.swing.JFileChooser file = new javax.swing.JFileChooser();
    private Graph graph;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JScrollPane imagesScrollPane;
    private javax.swing.JTable imagesTable;
    private javax.swing.JLabel selImg_jLabel;
    // End of variables declaration//GEN-END:variables
}
