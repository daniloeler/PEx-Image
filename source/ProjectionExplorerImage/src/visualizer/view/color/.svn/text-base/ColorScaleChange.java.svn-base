/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.view.color;

import visualizer.view.Viewer;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class ColorScaleChange extends javax.swing.JDialog {

    /** Creates new form ColorScaleChange */
    private ColorScaleChange(javax.swing.JFrame parent, Viewer gv) {
        super(parent);
        this.gv = gv;
        initComponents();
        ((ColorScalePanel) this.coloScalePanel).setColorTable(this.gv.getColorTable());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup = new javax.swing.ButtonGroup();
        colorPanel = new javax.swing.JPanel();
        scaleRangePanel = new javax.swing.JPanel();
        minSlider = new javax.swing.JSlider();
        maxSlider = new javax.swing.JSlider();
        coloScalePanel = new ColorScalePanel(this.gv);
        reverseButton = new javax.swing.JButton();
        colorChosePanel = new javax.swing.JPanel();
        undefinedRadioButton = new javax.swing.JRadioButton();
        grayRadioButton = new javax.swing.JRadioButton();
        heatedObjectsRadioButton = new javax.swing.JRadioButton();
        linGrayRadioButton = new javax.swing.JRadioButton();
        locsRadioButton = new javax.swing.JRadioButton();
        rainbowRadioButton = new javax.swing.JRadioButton();
        buttonPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Change the Color Scale");
        setModal(true);
        colorPanel.setLayout(new java.awt.BorderLayout(3, 3));

        colorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Color Scale"));
        scaleRangePanel.setLayout(new java.awt.GridBagLayout());

        scaleRangePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Scale Range"));
        minSlider.setMaximum(50);
        minSlider.setPaintLabels(true);
        minSlider.setPaintTicks(true);
        minSlider.setInverted(true);
        minSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        scaleRangePanel.add(minSlider, gridBagConstraints);

        maxSlider.setMaximum(50);
        maxSlider.setPaintLabels(true);
        maxSlider.setPaintTicks(true);
        maxSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxSliderStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        scaleRangePanel.add(maxSlider, gridBagConstraints);

        coloScalePanel.setMinimumSize(new java.awt.Dimension(20, 20));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        scaleRangePanel.add(coloScalePanel, gridBagConstraints);

        reverseButton.setText("Reverse Scale");
        reverseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        scaleRangePanel.add(reverseButton, gridBagConstraints);

        colorPanel.add(scaleRangePanel, java.awt.BorderLayout.SOUTH);

        colorChosePanel.setLayout(new java.awt.GridBagLayout());

        buttonGroup.add(undefinedRadioButton);
        undefinedRadioButton.setSelected(true);
        undefinedRadioButton.setText("Undefined");
        undefinedRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        undefinedRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        undefinedRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undefinedRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        colorChosePanel.add(undefinedRadioButton, gridBagConstraints);

        buttonGroup.add(grayRadioButton);
        grayRadioButton.setText("Gray");
        grayRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        grayRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        grayRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        colorChosePanel.add(grayRadioButton, gridBagConstraints);

        buttonGroup.add(heatedObjectsRadioButton);
        heatedObjectsRadioButton.setText("Heated Objetcs");
        heatedObjectsRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        heatedObjectsRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        heatedObjectsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                heatedObjectsRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        colorChosePanel.add(heatedObjectsRadioButton, gridBagConstraints);

        buttonGroup.add(linGrayRadioButton);
        linGrayRadioButton.setText("Linear Gray");
        linGrayRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        linGrayRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        linGrayRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                linGrayRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        colorChosePanel.add(linGrayRadioButton, gridBagConstraints);

        buttonGroup.add(locsRadioButton);
        locsRadioButton.setText("LOCS");
        locsRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        locsRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        locsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locsRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        colorChosePanel.add(locsRadioButton, gridBagConstraints);

        buttonGroup.add(rainbowRadioButton);
        rainbowRadioButton.setText("Rainbow");
        rainbowRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        rainbowRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        rainbowRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rainbowRadioButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        colorChosePanel.add(rainbowRadioButton, gridBagConstraints);

        colorPanel.add(colorChosePanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(colorPanel, java.awt.BorderLayout.CENTER);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void maxSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxSliderStateChanged
        float max = (float) this.maxSlider.getValue() / (float) this.maxSlider.getMaximum();
        this.colorTable.getColorScale().setMax(max);

        if (this.gv != null) {
            gv.colorAs(gv.getCurrentScalar());
            gv.updateImage();
        }

        this.coloScalePanel.repaint();
    }//GEN-LAST:event_maxSliderStateChanged

    private void minSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minSliderStateChanged
        float min = (float) this.minSlider.getValue() / (float) this.minSlider.getMaximum();
        this.colorTable.getColorScale().setMin(1 - min);

        if (this.gv != null) {
            gv.colorAs(gv.getCurrentScalar());
            gv.updateImage();
        }

        this.coloScalePanel.repaint();
    }//GEN-LAST:event_minSliderStateChanged

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void reverseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseButtonActionPerformed
        this.colorTable.getColorScale().setReverse(!this.colorTable.getColorScale().isReverse());

        float max = (float) this.maxSlider.getValue() / (float) this.maxSlider.getMaximum();
        this.colorTable.getColorScale().setMax(max);
        float min = (float) this.minSlider.getValue() / (float) this.minSlider.getMaximum();
        this.colorTable.getColorScale().setMin(1 - min);

        if (this.gv != null) {
            gv.colorAs(gv.getCurrentScalar());
            gv.updateImage();
        }

        this.coloScalePanel.repaint();
    }//GEN-LAST:event_reverseButtonActionPerformed

    private void rainbowRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rainbowRadioButtonActionPerformed
        this.changeColorScale(new RainbowScale());
    }//GEN-LAST:event_rainbowRadioButtonActionPerformed

    private void locsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locsRadioButtonActionPerformed
        this.changeColorScale(new LocsScale());
    }//GEN-LAST:event_locsRadioButtonActionPerformed

    private void linGrayRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_linGrayRadioButtonActionPerformed
        this.changeColorScale(new LinearGrayScale());
    }//GEN-LAST:event_linGrayRadioButtonActionPerformed

    private void heatedObjectsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_heatedObjectsRadioButtonActionPerformed
        this.changeColorScale(new HeatedObjectScale());
    }//GEN-LAST:event_heatedObjectsRadioButtonActionPerformed

    private void grayRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayRadioButtonActionPerformed
        this.changeColorScale(new GrayScale());
    }//GEN-LAST:event_grayRadioButtonActionPerformed

    private void undefinedRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undefinedRadioButtonActionPerformed
        this.changeColorScale(new UndefinedScale());
    }//GEN-LAST:event_undefinedRadioButtonActionPerformed

    public static ColorScaleChange getInstance(javax.swing.JFrame parent, Viewer gv) {
        if (instance == null || instance.gv != gv) {
            instance = new ColorScaleChange(parent, gv);
        }
        return instance;
    }

    public void display() {
        this.colorTable = this.gv.getColorTable();
        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    private void changeColorScale(ColorScale scale) {
        this.colorTable.setColorScale(scale);

        float max = (float) this.maxSlider.getValue() / (float) this.maxSlider.getMaximum();
        this.colorTable.getColorScale().setMax(max);
        float min = (float) this.minSlider.getValue() / (float) this.minSlider.getMaximum();
        this.colorTable.getColorScale().setMin(1 - min);

        if (this.gv != null) {
            gv.colorAs(gv.getCurrentScalar());
            gv.updateImage();
        }

        this.coloScalePanel.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
            //new ColorScaleChange(new javax.swing.JFrame(), true).setVisible(true);
            }

        });
    }

    private ColorTable colorTable;
    private Viewer gv;
    private static ColorScaleChange instance;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel coloScalePanel;
    private javax.swing.JPanel colorChosePanel;
    private javax.swing.JPanel colorPanel;
    private javax.swing.JRadioButton grayRadioButton;
    private javax.swing.JRadioButton heatedObjectsRadioButton;
    private javax.swing.JRadioButton linGrayRadioButton;
    private javax.swing.JRadioButton locsRadioButton;
    private javax.swing.JSlider maxSlider;
    private javax.swing.JSlider minSlider;
    private javax.swing.JRadioButton rainbowRadioButton;
    private javax.swing.JButton reverseButton;
    private javax.swing.JPanel scaleRangePanel;
    private javax.swing.JRadioButton undefinedRadioButton;
    // End of variables declaration//GEN-END:variables
}
