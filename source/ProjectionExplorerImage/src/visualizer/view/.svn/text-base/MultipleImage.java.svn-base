/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer for Imaging (PEx-Image).
 *
 * How to cite this work:
 *
 *
 * PEx-Image is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx-Image is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 * Contributor(s): Marcel Yugo Nakazaki <myn@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx-Image. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.view;

import java.io.IOException;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;
import visualizer.graph.Graph;
import visualizer.graph.Vertex;
import java.awt.Image;
import javax.swing.ImageIcon;
import java.util.ArrayList;


/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class MultipleImage extends javax.swing.JDialog {
    
    private static final long serialVersionUID=1L;
    
    /**
     * Creates new form MultipleImageView
     */
    private MultipleImage(javax.swing.JFrame parent) {
        super(parent);
        initComponents();
        this.pack();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      buttonPanel = new javax.swing.JPanel();
      closeButton = new javax.swing.JButton();
      dataPanel = new javax.swing.JPanel();
      fileviewTabbedPane = new javax.swing.JTabbedPane();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("File Multiple View");
      setModal(true);

      closeButton.setText("Close");
      closeButton.addActionListener(new java.awt.event.ActionListener() {
         public void actionPerformed(java.awt.event.ActionEvent evt) {
            closeButtonActionPerformed(evt);
         }
      });
      buttonPanel.add(closeButton);

      getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

      dataPanel.setLayout(new java.awt.BorderLayout());

      fileviewTabbedPane.setMinimumSize(new java.awt.Dimension(1000, 500));
      fileviewTabbedPane.setPreferredSize(new java.awt.Dimension(800, 500));
      fileviewTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
         public void stateChanged(javax.swing.event.ChangeEvent evt) {
            fileviewTabbedPaneStateChanged(evt);
         }
      });
      dataPanel.add(fileviewTabbedPane, java.awt.BorderLayout.CENTER);

      getContentPane().add(dataPanel, java.awt.BorderLayout.CENTER);

      pack();
   }// </editor-fold>//GEN-END:initComponents
    
    private void fileviewTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fileviewTabbedPaneStateChanged
        if(this.fileviewTabbedPane.getSelectedComponent() instanceof FilePane) {
            this.showedFilePane=(FilePane)this.fileviewTabbedPane.getSelectedComponent();
        }
    }//GEN-LAST:event_fileviewTabbedPaneStateChanged
    
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed
    
    public static MultipleImage getInstance(javax.swing.JFrame parent) {
        if(instance==null || instance.getParent() != parent) {
            instance=new MultipleImage(parent);
        }
        return instance;
    }
    
    public void display(Viewer gv, ArrayList<Vertex> vertex) {
        this.vertex = vertex;
        this.graph=gv.getGraph();
        
        //Remove all tab pane
        this.fileviewTabbedPane.removeAll();
        //Icon icon=new ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/S16.gif"));
        
        if(vertex != null) {
            for(Vertex v: vertex) {
                if(v.isValid()) {
                    String label=v.toString();
                    if(label.length() > this.numberCharsAtTabTitle) {
                        label=label.substring(0,this.numberCharsAtTabTitle-3)+"...";
                    }
                    
                    try {
                        Image im=graph.getImageCollection().getImage(v.getUrl());
                        this.fileviewTabbedPane.addTab(label,new FilePane(v.toString(),im, v.getUrl()));
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    
                }
            }
        }
        
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }
    
//   public void display(javax.swing.JFrame parent, GraphViewer gv, Vertex vertex) {
//        java.util.Vector<Vertex> neighbors=new java.util.Vector<Vertex>();
//        String triName=gv.getEdgesName();
//        gv.getGraph().getNeighbors(neighbors,null,triName,vertex,gv.getNeighborhoodDepth());
//        neighbors.insertElementAt(vertex,0);
//        this.display(parent,gv,neighbors);
//    }
   public void display(Viewer gv, Vertex vertex) {
      ArrayList<Vertex> neighbors = new ArrayList<Vertex>();
      gv.getGraph().getNeighbors(neighbors, null, gv.getCurrentConnectivity(),
              vertex, gv.getNeighborhoodDepth());

      if (neighbors.size() > 0) {
         neighbors.set(0, vertex);
      } else {
         neighbors.add(vertex);
      }

      this.display(gv, neighbors);
   }
    
    
    class FilePane extends javax.swing.JPanel {
        
        private static final long serialVersionUID=1L;
        
        public FilePane(String label, Image img, String filename){
            this.initComponents(label, img, filename);
        }
        
        private void initComponents(String label, Image img, String filename) {
            this.labelImage = new javax.swing.JLabel( new ImageIcon(img) );
            this.filelabelPanel = new javax.swing.JPanel();
            this.filelabelField = new javax.swing.JTextField();
            
            this.setLayout(new java.awt.BorderLayout());
            
            this.add(labelImage, java.awt.BorderLayout.CENTER);
            
            this.filelabelPanel.setLayout(new java.awt.BorderLayout());
            this.filelabelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("File Label"));
            this.filelabelField.setEditable(false);
            this.filelabelPanel.add(filelabelField, java.awt.BorderLayout.CENTER);
            this.add(filelabelPanel, java.awt.BorderLayout.NORTH);
            
            //Loading the data
            this.filelabelField.setText(label);
            this.filelabelField.setCaretPosition(0);
            
        }
        
        // Creates highlights around all occurrences of pattern in textComp
        public void highlight(JTextComponent textComp, String pattern) {
            // First remove all old highlights
            removeHighlights(textComp);
            
            try {
                Highlighter hilite = textComp.getHighlighter();
                Document doc = textComp.getDocument();
                String text = doc.getText(0, doc.getLength()).toLowerCase();
                int pos = 0;
                
                if((pos = text.indexOf(pattern.toLowerCase(), pos)) >= 0) {
                    // Create highlighter using private painter and apply around pattern
                    hilite.addHighlight(pos, pos+pattern.length(), myHighlightPainter);
                    this.textArea.setCaretPosition(pos);
                    pos += pattern.length();
                }
                
                // find for pattern
                while((pos = text.indexOf(pattern.toLowerCase(), pos)) >= 0) {
                    // Create highlighter using private painter and apply around pattern
                    hilite.addHighlight(pos, pos+pattern.length(), myHighlightPainter);
                    pos += pattern.length();
                }
            } catch (BadLocationException e) {
            }
        }
        
        // Removes only our private highlights
        public void removeHighlights(JTextComponent textComp) {
            Highlighter hilite = textComp.getHighlighter();
            Highlighter.Highlight[] hilites = hilite.getHighlights();
            
            for (int i=0; i<hilites.length; i++) {
                if (hilites[i].getPainter() instanceof MyHighlightPainter) {
                    hilite.removeHighlight(hilites[i]);
                }
            }
        }
        
        // A private subclass of the default highlight painter
        class MyHighlightPainter extends DefaultHighlighter.DefaultHighlightPainter {
            public MyHighlightPainter(java.awt.Color color) {
                super(color);
            }
        }
        
        private javax.swing.JLabel labelImage;
        private javax.swing.JTextField filelabelField;
        private javax.swing.JPanel filelabelPanel;
        
        private javax.swing.JEditorPane textArea;
        private javax.swing.JScrollPane textAreaScrollPane;
        
        // An instance of the private subclass of the default highlight painter
        private Highlighter.HighlightPainter myHighlightPainter = new MyHighlightPainter(java.awt.Color.YELLOW);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MultipleImage(null).setVisible(true);
            }
        });
    }
    
    private FilePane showedFilePane=null;
    private final int numberCharsAtTabTitle=20;
    private static MultipleImage instance;
    private ArrayList<Vertex> vertex;
    //private javax.swing.JFileChooser file = new javax.swing.JFileChooser();
    private Graph graph;
    
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JPanel buttonPanel;
   private javax.swing.JButton closeButton;
   private javax.swing.JPanel dataPanel;
   private javax.swing.JTabbedPane fileviewTabbedPane;
   // End of variables declaration//GEN-END:variables
}