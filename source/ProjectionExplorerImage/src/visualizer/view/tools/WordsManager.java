/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Roberto Pinho <robertopinho@yahoo.com.br>, 
 *                 Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.view.tools;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import visualizer.textprocessing.Startword;
import visualizer.textprocessing.Stopword;
import visualizer.util.OpenDialog;
import visualizer.util.SaveDialog;
import visualizer.util.SystemPropertiesManager;
import visualizer.util.filefilter.STARTFilter;
import visualizer.util.filefilter.STOPFilter;

/**
 *
 * @author Fernando Vieira Paulovich, Roberto Pinho
 */
public class WordsManager extends javax.swing.JDialog {

    /** Creates new form StopwordsManager */
    private WordsManager(java.awt.Frame parent, boolean stopwordsDialog) {
        super(parent);
        initComponents();
        this.stopwordsDialog = stopwordsDialog;
        adaptLayout();
    }

    private WordsManager(java.awt.Dialog parent, boolean stopwordsDialog) {
        super(parent);
        initComponents();
        this.stopwordsDialog = stopwordsDialog;
        adaptLayout();
    }

    private void adaptLayout() {
        if (!this.stopwordsDialog) {
            setTitle("Startwords List Manager");
            wordsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Startwords Manager"));
            newScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("New Startwords"));
            wordsScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Startwords"));
            filePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Startwords File"));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        wordsPanel = new javax.swing.JPanel();
        addWordsPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        newScrollPane = new javax.swing.JScrollPane();
        newWordsTable = new javax.swing.JTable();
        currentWordsPanel = new javax.swing.JPanel();
        wordsScrollPane = new javax.swing.JScrollPane();
        wordsTable = new javax.swing.JTable();
        removeButton = new javax.swing.JButton();
        mergePanel = new javax.swing.JPanel();
        mergeButton = new javax.swing.JButton();
        filePanel = new javax.swing.JPanel();
        fileTextField = new javax.swing.JTextField();
        fileButtonPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        saveButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Stopwords List Manager");
        setModal(true);

        wordsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Stopwords Manager"));
        wordsPanel.setLayout(new java.awt.BorderLayout(5, 5));

        addWordsPanel.setLayout(new java.awt.BorderLayout());

        addButton.setText("New");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });
        addWordsPanel.add(addButton, java.awt.BorderLayout.SOUTH);

        newScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("New Stopwords"));
        newScrollPane.setPreferredSize(new java.awt.Dimension(200, 350));
        newScrollPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newScrollPaneMouseClicked(evt);
            }
        });
        newScrollPane.setViewportView(newWordsTable);

        addWordsPanel.add(newScrollPane, java.awt.BorderLayout.CENTER);

        wordsPanel.add(addWordsPanel, java.awt.BorderLayout.EAST);

        currentWordsPanel.setLayout(new java.awt.BorderLayout());

        wordsScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Current Stopwords"));
        wordsScrollPane.setPreferredSize(new java.awt.Dimension(200, 350));
        wordsScrollPane.setViewportView(wordsTable);

        currentWordsPanel.add(wordsScrollPane, java.awt.BorderLayout.CENTER);

        removeButton.setText("Remove");
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });
        currentWordsPanel.add(removeButton, java.awt.BorderLayout.SOUTH);

        wordsPanel.add(currentWordsPanel, java.awt.BorderLayout.WEST);

        mergePanel.setLayout(new java.awt.GridBagLayout());

        mergeButton.setText("<< Merge");
        mergeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergeButtonActionPerformed(evt);
            }
        });
        mergePanel.add(mergeButton, new java.awt.GridBagConstraints());

        wordsPanel.add(mergePanel, java.awt.BorderLayout.CENTER);

        filePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Stopwords File"));
        filePanel.setLayout(new java.awt.BorderLayout(5, 5));

        fileTextField.setColumns(15);
        fileTextField.setEditable(false);
        filePanel.add(fileTextField, java.awt.BorderLayout.NORTH);
        filePanel.add(fileButtonPanel, java.awt.BorderLayout.CENTER);

        wordsPanel.add(filePanel, java.awt.BorderLayout.NORTH);

        getContentPane().add(wordsPanel, java.awt.BorderLayout.CENTER);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(saveButton);

        openButton.setText("Open");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(openButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int index = this.wordsTable.getSelectedRow();

        if (index > -1) {
            String stopword = (String) this.currentWordsTableModel.getValueAt(index, 0);
            this.currentWordsTableModel.removeRow(index);

            try {
                if (this.stopwordsDialog) {
                    Stopword stp = Stopword.getInstance();
                    stp.removeStopword(stopword);
                } else {
                    Startword stp = Startword.getInstance();
                    stp.removeStartword(stopword);
                }

            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        if (this.stopwordsDialog) {
            int result = SaveDialog.showSaveDialog(new STOPFilter(), this, "stopwords.spw");

            if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
                try {
                    String filename = SaveDialog.getFilename();
                    Stopword stp = Stopword.getInstance();
                    stp.saveStopwordsList(filename);
                } catch (IOException ex) {
                    Logger.getLogger(WordsManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            int result = SaveDialog.showSaveDialog(new STARTFilter(), this, "startwords.stw");

            if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
                try {
                    String filename = SaveDialog.getFilename();
                    Startword stp = Startword.getInstance();
                    stp.saveStartwordsList(filename);
                } catch (IOException ex) {
                    Logger.getLogger(WordsManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void newScrollPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newScrollPaneMouseClicked
        if (evt.getClickCount() == 2) {
            this.addButtonActionPerformed(null);
        }
    }//GEN-LAST:event_newScrollPaneMouseClicked

    private void mergeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergeButtonActionPerformed
        List<String> stopwords = new ArrayList<String>();
        this.newWordsTable.editCellAt(0, 0);

        if (this.stopwordsDialog) {  //Stop words
            try {
                Stopword stp = Stopword.getInstance();

                for (int i = 0; i < this.newWordsTableModel.getRowCount(); i++) {
                    String value = (String) this.newWordsTableModel.getValueAt(i, 0);

                    if (value.trim().length() > 0) {
                        stopwords.add(value);
                    }
                }

                stp.addStopwords(stopwords);
                this.fileTextField.setText(stp.getFilename().substring(stp.getFilename().lastIndexOf("\\") + 1));

                this.initModels();
                this.wordsTable.setModel(this.currentWordsTableModel);
                this.newWordsTable.setModel(this.newWordsTableModel);

                for (String stopword : stp.getStopwordList()) {
                    String[] row = new String[1];
                    row[0] = stopword;
                    this.currentWordsTableModel.addRow(row);
                }
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        } else {  //start Words
            try {
                Startword sta = Startword.getInstance();

                for (int i = 0; i < this.newWordsTableModel.getRowCount(); i++) {
                    String value = (String) this.newWordsTableModel.getValueAt(i, 0);
                    String strWeight = (String) this.newWordsTableModel.getValueAt(i, 1);
                    Double weight;
                    try {
                        weight = new Double(strWeight);
                    } catch (Exception ex) {
                        Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
                        weight = 1.0;
                    }

                    if (value.trim().length() > 0) {
                        sta.addStartword(value, weight);
                    }
                }

                this.fileTextField.setText(sta.getFilename().substring(sta.getFilename().lastIndexOf("\\") + 1));

                this.initModels();
                this.wordsTable.setModel(this.currentWordsTableModel);
                this.newWordsTable.setModel(this.newWordsTableModel);

                for (int i = 0; i < sta.getStartwordList().size(); i++) {
                    String[] row = new String[2];
                    row[0] = sta.getStartwordList().get(i).word;
                    row[1] = sta.getStartwordList().get(i).weight.toString();
                    this.currentWordsTableModel.addRow(row);
                }
            } catch (java.io.IOException ex) {
                Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_mergeButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        this.newWordsTableModel.addRow(new String[]{""});
        this.newWordsTable.editCellAt(this.newWordsTableModel.getRowCount() - 1, 0);
        this.newWordsTable.requestFocusInWindow();
    }//GEN-LAST:event_addButtonActionPerformed

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        if (this.stopwordsDialog) {
            int result = OpenDialog.showOpenDialog(new STOPFilter(), this);

            if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
                try {
                    String filename = OpenDialog.getFilename();

                    SystemPropertiesManager m = SystemPropertiesManager.getInstance();
                    m.setProperty("SPW.FILE", filename);

                    Stopword stp = Stopword.getInstance();
                    stp.changeStopwordList(filename);
                    this.fileTextField.setText(stp.getFilename().substring(stp.getFilename().lastIndexOf("\\") + 1));

                    this.initModels();
                    this.wordsTable.setModel(this.currentWordsTableModel);
                    this.newWordsTable.setModel(this.newWordsTableModel);

                    for (String stopword : stp.getStopwordList()) {
                        String[] row = new String[1];
                        row[0] = stopword;
                        this.currentWordsTableModel.addRow(row);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(WordsManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            int result = OpenDialog.showOpenDialog(new STARTFilter(), this);

            if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
                try {
                    String filename = OpenDialog.getFilename();

                    SystemPropertiesManager m = SystemPropertiesManager.getInstance();
                    m.setProperty("STW.FILE", filename);

                    Startword sta = Startword.getInstance();
                    sta.changeStartwordList(filename);
                    this.fileTextField.setText(sta.getFilename().substring(sta.getFilename().lastIndexOf("\\") + 1));

                    this.initModels();
                    this.wordsTable.setModel(this.currentWordsTableModel);
                    this.newWordsTable.setModel(this.newWordsTableModel);

                    for (int i = 0; i < sta.getStartwordList().size(); i++) {
                        String[] row = new String[2];
                        row[0] = sta.getStartwordList().get(i).word;
                        row[1] = sta.getStartwordList().get(i).weight.toString();
                        this.currentWordsTableModel.addRow(row);
                    }
                } catch (IOException ex) {
                    Logger.getLogger(WordsManager.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_openButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    public static WordsManager getInstance(java.awt.Container parent, boolean stopwordsDialog) {
        if (parent instanceof javax.swing.JFrame) {
            return new WordsManager((javax.swing.JFrame) parent, stopwordsDialog);
        } else {
            return new WordsManager((javax.swing.JDialog) parent, stopwordsDialog);
        }
    }

    public void display() {
        this.initModels();
        this.wordsTable.setModel(this.currentWordsTableModel);
        this.newWordsTable.setModel(this.newWordsTableModel);

        try {
            if (stopwordsDialog) {
                Stopword stp = Stopword.getInstance();
                this.fileTextField.setText(stp.getFilename().substring(stp.getFilename().lastIndexOf("\\") + 1));

                for (String stopword : stp.getStopwordList()) {
                    String[] row = new String[1];
                    row[0] = stopword;
                    this.currentWordsTableModel.addRow(row);
                }
            } else {
                Startword sta = Startword.getInstance();
                this.fileTextField.setText(sta.getFilename().substring(sta.getFilename().lastIndexOf("\\") + 1));

                for (int i = 0; i < sta.getStartwordList().size(); i++) {
                    String[] row = new String[2];
                    row[0] = sta.getStartwordList().get(i).word;
                    row[1] = sta.getStartwordList().get(i).weight.toString();
                    this.currentWordsTableModel.addRow(row);
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
        }

        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    private void initModels() {
        String[] titles;

        if (this.stopwordsDialog) {
            titles = new String[]{"Stopwords"};
        } else {
            titles = new String[]{"Startwords", "Weight"};
        }

        this.currentWordsTableModel = new DefaultTableModel(null, titles);
        this.newWordsTableModel = new DefaultTableModel(null, titles);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new WordsManager(new javax.swing.JFrame(), true).setVisible(true);
            }

        });
    }

    private boolean stopwordsDialog = true;
    private DefaultTableModel currentWordsTableModel;
    private DefaultTableModel newWordsTableModel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addWordsPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel currentWordsPanel;
    private javax.swing.JPanel fileButtonPanel;
    private javax.swing.JPanel filePanel;
    private javax.swing.JTextField fileTextField;
    private javax.swing.JButton mergeButton;
    private javax.swing.JPanel mergePanel;
    private javax.swing.JScrollPane newScrollPane;
    private javax.swing.JTable newWordsTable;
    private javax.swing.JButton openButton;
    private javax.swing.JButton removeButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel wordsPanel;
    private javax.swing.JScrollPane wordsScrollPane;
    private javax.swing.JTable wordsTable;
    // End of variables declaration//GEN-END:variables
}
