/*
 * FeaturesWeightView.java
 *
 * Created on 28 de Abril de 2009, 10:28
 */
package visualizer.view.tools;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import visualizer.matrix.DenseMatrix;
import visualizer.matrix.DenseVector;
import visualizer.matrix.Matrix;
import visualizer.matrix.MatrixFactory;
import visualizer.matrix.Vector;
import visualizer.matrix.normalization.Normalization;
import visualizer.matrix.normalization.NormalizationFactory;
import visualizer.matrix.normalization.NormalizationType;
import visualizer.util.OpenDialog;
import visualizer.util.filefilter.DATAFilter;

/**
 *
 * @author  Danilo
 */
public class PointsToMatlabView extends javax.swing.JDialog {

    /** Creates new form FeaturesWeightView */
    public PointsToMatlabView(java.awt.Frame parent) {
        super(parent);
        initComponents();
        this.featureModel = (DefaultTableModel) this.features_jTable.getModel();
        for (NormalizationType nt : NormalizationType.getTypes()) {
            this.normalizationComboBox.addItem(nt);
        }
    }

    public static PointsToMatlabView getInstance(java.awt.Frame parent) {
        if (instance == null) {
            instance = new PointsToMatlabView(parent);
        }
        return instance;
    }

    public void display() {
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        features_jTable = new javax.swing.JTable();
        addFile_jButton = new javax.swing.JButton();
        saveToMatlab_jButton = new javax.swing.JButton();
        normalizationComboBox = new javax.swing.JComboBox();
        clearAll_jButton = new javax.swing.JButton();
        saveToWeka_jButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));

        features_jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(features_jTable);

        addFile_jButton.setText("Add File");
        addFile_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFile_jButtonActionPerformed(evt);
            }
        });

        saveToMatlab_jButton.setText("Save to Matlab");
        saveToMatlab_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToMatlab_jButtonActionPerformed(evt);
            }
        });

        clearAll_jButton.setText("Clear All");
        clearAll_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAll_jButtonActionPerformed(evt);
            }
        });

        saveToWeka_jButton.setText("Save to Weka");
        saveToWeka_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToWeka_jButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(normalizationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(470, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(clearAll_jButton)
                        .addGap(18, 18, 18)
                        .addComponent(addFile_jButton)
                        .addGap(88, 88, 88)
                        .addComponent(saveToMatlab_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(saveToWeka_jButton))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)))
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(normalizationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearAll_jButton)
                    .addComponent(saveToWeka_jButton)
                    .addComponent(saveToMatlab_jButton)
                    .addComponent(addFile_jButton))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void addFile_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFile_jButtonActionPerformed
        // TODO add your handling code here:
        int result = OpenDialog.showOpenDialog(new DATAFilter(), this);

        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            //String filename = getFilename(OpenDialog.getFilename());
            String[] row = new String[1];
            row[0] = filename;
            this.featureModel.addRow(row);
        }
}//GEN-LAST:event_addFile_jButtonActionPerformed

    private void saveToMatlab_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToMatlab_jButtonActionPerformed
        // TODO add your handling code here:        
        Normalization norm = NormalizationFactory.getInstance((NormalizationType) this.normalizationComboBox.getSelectedItem());

        for (int i = 0; i < this.featureModel.getRowCount(); i++) {
            String filename = (String) this.featureModel.getValueAt(i, 0);
            try {
                DenseMatrix m = new DenseMatrix();
                m.load(filename);
                m = (DenseMatrix) norm.execute(m);
                saveToMatlab(m.toMatrix(), m.getClassData(), filename + ".txt");
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
}//GEN-LAST:event_saveToMatlab_jButtonActionPerformed

    private void saveToMatlab(float points[][], float cdata[], String filename) {
        BufferedWriter out = null;
        try {
            out = new BufferedWriter(new FileWriter(filename));
            for (int i = 0; i < points.length; i++) {
                for (int j = 0; j < points[i].length; j++) {
                    out.write(points[i][j] + ",");
                }
                out.write(Float.toString(cdata[i]));
                out.write("\r\n");
            }
        } catch (java.io.IOException ioE) {
            ioE.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                } catch (java.io.IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    private void saveToWeka(Matrix matrix, float cdata[], String filename) {
        BufferedWriter out = null;
        try {
            //header
            float points[][] = matrix.toMatrix();
            out = new BufferedWriter(new FileWriter(filename));
            out.write("@relation " + filename.substring(filename.lastIndexOf("//") + 1, filename.length()));
            out.write("\n");
            for (String att : matrix.getAttributes()) {
                out.write("@attribute " + att + " real\n");
            }
            out.write("@attribute classes{");
            HashSet<Float> uniqueClasses = new HashSet<Float>();
            for (int i = 0; i < matrix.getClassData().length; i++) {
                uniqueClasses.add(matrix.getClassData()[i]);
            }

            Iterator it = uniqueClasses.iterator();
            for (int i=0; i<uniqueClasses.size()-1;i++){
                out.write((Float)it.next()+",");
            }
            out.write((Float)it.next()+"}\n");
            out.write("@data\n");

            //data
            for (int i = 0; i < points.length; i++) {
                for (int j = 0; j < points[i].length; j++) {
                    out.write(points[i][j] + ",");
                }
                out.write(Float.toString(cdata[i]));
                out.write("\r\n");
            }
        } catch (java.io.IOException ioE) {
            ioE.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                } catch (java.io.IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    private void clearAll_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAll_jButtonActionPerformed
        // TODO add your handling code here:
        while (this.featureModel.getRowCount() > 0) {
            this.featureModel.removeRow(this.featureModel.getRowCount() - 1);
        }
    }//GEN-LAST:event_clearAll_jButtonActionPerformed

    private void saveToWeka_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToWeka_jButtonActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        Normalization norm = NormalizationFactory.getInstance((NormalizationType) this.normalizationComboBox.getSelectedItem());

        for (int i = 0; i < this.featureModel.getRowCount(); i++) {
            String filename = (String) this.featureModel.getValueAt(i, 0);
            try {
                
                Matrix m = MatrixFactory.getInstance(filename);
                //m.load(filename);
                m = norm.execute(m);
                saveToWeka(m, m.getClassData(), filename + ".arff");
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }
    }//GEN-LAST:event_saveToWeka_jButtonActionPerformed

    private DenseMatrix generateMatrix() {
        ArrayList<DenseMatrix> features = new ArrayList<DenseMatrix>();

        Normalization norm = NormalizationFactory.getInstance((NormalizationType) this.normalizationComboBox.getSelectedItem());
        int nCol = 0;
        for (int i = 0; i < this.featureModel.getRowCount(); i++) {
            DenseMatrix d = new DenseMatrix();
            try {
                d.load((String) this.featureModel.getValueAt(i, 0));
                nCol = nCol + d.getDimensions();
                d = (DenseMatrix) norm.execute(d);
                features.add(d);
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }

        float[][] finalM = new float[features.get(0).getRowCount()][nCol];
        int lastIni = 0;
        ArrayList<String> attributes = new ArrayList<String>();
        for (int i = 0; i < this.featureModel.getRowCount(); i++) {
            float[][] m = features.get(i).toMatrix();
            float w = Float.parseFloat((String) this.featureModel.getValueAt(i, 1));
            //getting attributes
            for (String s : features.get(i).getAttributes()) {
                attributes.add(s);
            }
            //weighting
            for (int j = 0; j < m.length; j++) {
                for (int k = 0; k < m[j].length; k++) {
                    finalM[j][lastIni + k] = m[j][k] * w;
                }
            }
            lastIni = lastIni + m[0].length;
        }

        DenseMatrix finalMatrix = new DenseMatrix();
        finalMatrix.setAttributes(attributes);
        for (int i = 0; i < features.get(0).getRowCount(); i++) {
            Vector oldv = features.get(0).getRow(i);
            finalMatrix.addRow(new DenseVector(finalM[i], oldv.getId(), oldv.getKlass()));
        }

        return finalMatrix;
    }

    private String getFilename(String filename) {
        return filename.substring(filename.lastIndexOf("\\") + 1, filename.length());
    }
    private DefaultTableModel featureModel;
    private static PointsToMatlabView instance;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFile_jButton;
    private javax.swing.JButton clearAll_jButton;
    private javax.swing.JTable features_jTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox normalizationComboBox;
    private javax.swing.JButton saveToMatlab_jButton;
    private javax.swing.JButton saveToWeka_jButton;
    // End of variables declaration//GEN-END:variables
}
