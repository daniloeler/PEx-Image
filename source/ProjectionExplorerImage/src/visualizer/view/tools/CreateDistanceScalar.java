/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.view.tools;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import visualizer.graph.Scalar;
import visualizer.graph.Vertex;
import visualizer.graph.scalar.DistanceScalar;
import visualizer.projection.distance.Dissimilarity;
import visualizer.projection.distance.DissimilarityFactory;
import visualizer.projection.distance.DissimilarityType;
import visualizer.util.OpenDialog;
import visualizer.util.filefilter.DATAFilter;
import visualizer.util.filefilter.DMATFilter;
import visualizer.view.Viewer;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class CreateDistanceScalar extends javax.swing.JDialog {

    public static final int NOT_GENERATED = 0;
    public static final int GENERATED = 1;
    /** Creates new form CreateDistanceScalar */
    private CreateDistanceScalar(java.awt.Frame parent) {
        super(parent);
        initComponents();

        for (DissimilarityType disstype : DissimilarityType.getTypes()) {
            if (disstype != DissimilarityType.KOLMOGOROV && disstype != DissimilarityType.NONE) {
                this.distanceComboBox.addItem(disstype);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sourceGroup = new javax.swing.ButtonGroup();
        dataPanel = new javax.swing.JPanel();
        chooseDistanceTypePanel2 = new javax.swing.JPanel();
        distanceComboBox = new javax.swing.JComboBox();
        instancePanel = new javax.swing.JPanel();
        instanceLabel = new javax.swing.JLabel();
        instanceTextField = new javax.swing.JTextField();
        sourcePanel = new javax.swing.JPanel();
        pointsRadioButton = new javax.swing.JRadioButton();
        distanceMatrixRadioButton = new javax.swing.JRadioButton();
        distanceMatrixTextField = new javax.swing.JTextField();
        pointsTextField = new javax.swing.JTextField();
        pointsButton = new javax.swing.JButton();
        distanceMatrixButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Distance Scalar");
        setModal(true);

        dataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data"));
        dataPanel.setLayout(new java.awt.GridBagLayout());

        chooseDistanceTypePanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose the Distance Type"));
        chooseDistanceTypePanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        chooseDistanceTypePanel2.add(distanceComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        dataPanel.add(chooseDistanceTypePanel2, gridBagConstraints);

        instancePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data Instance"));
        instancePanel.setLayout(new java.awt.GridBagLayout());

        instanceLabel.setText("Instance to compare");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        instancePanel.add(instanceLabel, gridBagConstraints);

        instanceTextField.setColumns(40);
        instanceTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        instancePanel.add(instanceTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        dataPanel.add(instancePanel, gridBagConstraints);

        sourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Source File"));
        sourcePanel.setLayout(new java.awt.GridBagLayout());

        sourceGroup.add(pointsRadioButton);
        pointsRadioButton.setSelected(true);
        pointsRadioButton.setText("Points File");
        pointsRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pointsRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pointsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(pointsRadioButton, gridBagConstraints);

        sourceGroup.add(distanceMatrixRadioButton);
        distanceMatrixRadioButton.setText("Distance File");
        distanceMatrixRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        distanceMatrixRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        distanceMatrixRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceMatrixRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(distanceMatrixRadioButton, gridBagConstraints);

        distanceMatrixTextField.setColumns(35);
        distanceMatrixTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(distanceMatrixTextField, gridBagConstraints);

        pointsTextField.setColumns(35);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(pointsTextField, gridBagConstraints);

        pointsButton.setText("Search...");
        pointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(pointsButton, gridBagConstraints);

        distanceMatrixButton.setText("Search...");
        distanceMatrixButton.setEnabled(false);
        distanceMatrixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceMatrixButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(distanceMatrixButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        dataPanel.add(sourcePanel, gridBagConstraints);

        getContentPane().add(dataPanel, java.awt.BorderLayout.CENTER);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (this.gv != null && this.gv.getGraph() != null) {
            Vertex v = this.gv.getSelectedVertex();

            if (v != null) {
                DistanceScalar ds = new DistanceScalar(gv.getGraph());

                if (this.pointsRadioButton.isSelected()) {
                    if (this.pointsTextField.getText().trim().length() > 0) {
                        try {
                            DissimilarityType mtype = (DissimilarityType) this.distanceComboBox.getSelectedItem();
                            Dissimilarity diss = DissimilarityFactory.getInstance(mtype);

                            this.scalar = ds.scalarFromPointsFile(this.pointsTextField.getText(), diss, v);
                        } catch (IOException ex) {
                            Logger.getLogger(CreateDistanceScalar.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "A points file must be selected.",
                                "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else if (this.distanceMatrixRadioButton.isSelected()) {
                    if (this.distanceMatrixTextField.getText().trim().length() > 0) {
                        try {
                            this.scalar = ds.scalarFromDistanceMarix(this.distanceMatrixTextField.getText(), v);
                        } catch (IOException ex) {
                            Logger.getLogger(CreateDistanceScalar.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "A distance matrix file must be selected.",
                                "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }

            this.gv.cleanSelection(false);
            this.setVisible(false);
            this.result = CreateDistanceScalar.GENERATED;
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_closeButtonActionPerformed

    private void pointsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsRadioButtonActionPerformed
        this.distanceMatrixButton.setEnabled(false);
        this.distanceMatrixTextField.setEnabled(false);

        this.pointsButton.setEnabled(true);
        this.pointsTextField.setEnabled(true);

        this.distanceMatrixTextField.setText("");

        this.distanceComboBox.setEnabled(true);
    }//GEN-LAST:event_pointsRadioButtonActionPerformed

    private void distanceMatrixRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceMatrixRadioButtonActionPerformed
        this.distanceMatrixButton.setEnabled(true);
        this.distanceMatrixTextField.setEnabled(true);

        this.pointsButton.setEnabled(false);
        this.pointsTextField.setEnabled(false);

        this.pointsTextField.setText("");

        this.distanceComboBox.setEnabled(false);
    }//GEN-LAST:event_distanceMatrixRadioButtonActionPerformed

    private void pointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsButtonActionPerformed
        int res = OpenDialog.showOpenDialog(new DATAFilter(), this);

        if (res == JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            this.pointsTextField.setText(filename);
        }
    }//GEN-LAST:event_pointsButtonActionPerformed

    private void distanceMatrixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceMatrixButtonActionPerformed
        int result = OpenDialog.showOpenDialog(new DMATFilter(), this);

        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            this.distanceMatrixTextField.setText(filename);
        }
    }//GEN-LAST:event_distanceMatrixButtonActionPerformed

    public static CreateDistanceScalar getInstance(javax.swing.JFrame parent) {
        if (instance == null || instance.getParent() != parent) {
            instance = new CreateDistanceScalar(parent);
        }
        return instance;
    }

    public int display(Viewer gv) {
        this.gv = gv;
        this.result = CreateDistanceScalar.NOT_GENERATED;
        this.scalar = null;

        this.distanceMatrixTextField.setText("");
        this.pointsTextField.setText("");

        Vertex v = gv.getSelectedVertex();
        if (v != null) {
            this.instanceTextField.setText(v.toString());
            this.instanceTextField.setCaretPosition(0);
        } else {
            this.instanceTextField.setText("");
        }

        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);

        return this.result;
    }

    public Scalar getScalar() {
        return scalar;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                CreateDistanceScalar dialog = new CreateDistanceScalar(new javax.swing.JFrame());
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }

                });
                dialog.setVisible(true);
            }

        });
    }

    private static CreateDistanceScalar instance;
    private int result;
    private Viewer gv;
    private Scalar scalar;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel chooseDistanceTypePanel2;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JComboBox distanceComboBox;
    private javax.swing.JButton distanceMatrixButton;
    private javax.swing.JRadioButton distanceMatrixRadioButton;
    private javax.swing.JTextField distanceMatrixTextField;
    private javax.swing.JLabel instanceLabel;
    private javax.swing.JPanel instancePanel;
    private javax.swing.JTextField instanceTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JButton pointsButton;
    private javax.swing.JRadioButton pointsRadioButton;
    private javax.swing.JTextField pointsTextField;
    private javax.swing.ButtonGroup sourceGroup;
    private javax.swing.JPanel sourcePanel;
    // End of variables declaration//GEN-END:variables
}
