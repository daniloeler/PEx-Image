/*
 * FeaturesWeightView.java
 *
 * Created on 28 de Abril de 2009, 10:28
 */
package visualizer.view.tools;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import visualizer.matrix.DenseMatrix;
import visualizer.matrix.DenseVector;
import visualizer.matrix.Vector;
import visualizer.matrix.normalization.Normalization;
import visualizer.matrix.normalization.NormalizationFactory;
import visualizer.matrix.normalization.NormalizationType;
import visualizer.util.OpenDialog;
import visualizer.util.SaveDialog;
import visualizer.util.filefilter.BINFilter;
import visualizer.util.filefilter.DATAFilter;

/**
 *
 * @author  Danilo
 */
public class MultimodalVolumeReaderView extends javax.swing.JDialog {

    /** Creates new form FeaturesWeightView */
    public MultimodalVolumeReaderView(java.awt.Frame parent) {
        super(parent);
        initComponents();
        this.featureModel = (DefaultTableModel) this.features_jTable.getModel();
        for (NormalizationType nt : NormalizationType.getTypes()) {
            this.normalizationComboBox.addItem(nt);
        }
    }

    public static MultimodalVolumeReaderView getInstance(java.awt.Frame parent) {
        if (instance == null) {
            instance = new MultimodalVolumeReaderView(parent);
        }
        return instance;
    }

    public void display() {
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        features_jTable = new javax.swing.JTable();
        addFile_jButton = new javax.swing.JButton();
        saveAsPoints_jButton = new javax.swing.JButton();
        normalizationComboBox = new javax.swing.JComboBox();
        clearAll_jButton = new javax.swing.JButton();
        depth_jTextField = new javax.swing.JTextField();
        heigth_jTextField = new javax.swing.JTextField();
        width_jTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(500, 500));

        features_jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "File Name", "Att Name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(features_jTable);

        addFile_jButton.setText("Add File");
        addFile_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFile_jButtonActionPerformed(evt);
            }
        });

        saveAsPoints_jButton.setText("Save to Points Format");
        saveAsPoints_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsPoints_jButtonActionPerformed(evt);
            }
        });

        normalizationComboBox.setEnabled(false);

        clearAll_jButton.setText("Clear All");
        clearAll_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearAll_jButtonActionPerformed(evt);
            }
        });

        depth_jTextField.setText("100");

        heigth_jTextField.setText("500");

        width_jTextField.setText("500");
        width_jTextField.setMinimumSize(new java.awt.Dimension(12, 20));

        jLabel1.setText("Width");

        jLabel2.setText("Height");

        jLabel3.setText("Depth");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(clearAll_jButton)
                .addGap(59, 59, 59)
                .addComponent(addFile_jButton)
                .addGap(78, 78, 78)
                .addComponent(saveAsPoints_jButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(189, 189, 189))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(normalizationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 375, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(width_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(heigth_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(depth_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGap(103, 103, 103))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(normalizationComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(depth_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(heigth_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(width_jTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveAsPoints_jButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addFile_jButton)
                        .addComponent(clearAll_jButton)))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void addFile_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFile_jButtonActionPerformed
        // TODO add your handling code here:
        int result = OpenDialog.showOpenDialog(new BINFilter(), this);

        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            //String filename = getFilename(OpenDialog.getFilename());
            String[] row = new String[2];
            row[0] = filename;
            row[1] = filename.substring(filename.lastIndexOf("\\") + 1, filename.lastIndexOf('.') - 3);
            this.featureModel.addRow(row);
        }
}//GEN-LAST:event_addFile_jButtonActionPerformed

    private float[] getMean() {
        float mean[] = new float[this.featureModel.getRowCount()];
        int count[] = new int[this.featureModel.getRowCount()];
        Arrays.fill(mean, 0.0f);
        Arrays.fill(count, 0);

        ArrayList<DataInputStream> files = new ArrayList<DataInputStream>();
        for (int i = 0; i < this.featureModel.getRowCount(); i++) {
            String fName = (String) this.featureModel.getValueAt(i, 0);
            try {
                BufferedInputStream bis = new BufferedInputStream(new FileInputStream(fName));
                files.add(new DataInputStream(bis));
            } catch (java.io.FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        int W = Integer.parseInt(this.width_jTextField.getText());
        int H = Integer.parseInt(this.heigth_jTextField.getText());
        int D = Integer.parseInt(this.depth_jTextField.getText());
        for (int t = 0; t < W * H * D; t++) {
            for (int a = 0; a < this.featureModel.getRowCount(); a++) {
                try {
                    float v = files.get(a).readFloat();
                    if (v < 1.0000000e+35) {
                        mean[a] = mean[a] + v;
                        count[a]++;
                    }
                } catch (IOException ex) {
                    Logger.getLogger(MultimodalVolumeReaderView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }

        for (int a = 0; a < this.featureModel.getRowCount(); a++) {
            mean[a] = mean[a] / count[a];
        }

        for (int a = 0; a < this.featureModel.getRowCount(); a++) {
            try {
                files.get(a).close();
            } catch (IOException ex) {
                Logger.getLogger(MultimodalVolumeReaderView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return mean;
    }
    private void saveAsPoints_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsPoints_jButtonActionPerformed
        // TODO add your handling code here:
        int result = SaveDialog.showSaveDialog(new BINFilter(), this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = SaveDialog.getFilename();
            //Computing Mean
            System.out.println("Computing mean");
            float mean[] = getMean();

//            Normalization norm = NormalizationFactory.getInstance((NormalizationType) this.normalizationComboBox.getSelectedItem());
            ArrayList<String> attributes = new ArrayList<String>();
            ArrayList<DataInputStream> files = new ArrayList<DataInputStream>();
            BufferedInputStream bis = null;
            for (int i = 0; i < this.featureModel.getRowCount(); i++) {
                String fName = (String) this.featureModel.getValueAt(i, 0);
                String att = (String) this.featureModel.getValueAt(i, 1);
                attributes.add(att);
                try {
                    //File f = new File(fName);
                    bis = new BufferedInputStream(new FileInputStream(fName));
                    files.add(new DataInputStream(bis));
                } catch (java.io.FileNotFoundException e) {
                    e.printStackTrace();
                }
            }

            int W = Integer.parseInt(this.width_jTextField.getText());
            int H = Integer.parseInt(this.heigth_jTextField.getText());
            int D = Integer.parseInt(this.depth_jTextField.getText());
            BufferedOutputStream bOS = null;
            DataOutputStream out = null;
            try {
                bOS = new BufferedOutputStream(new FileOutputStream(filename));
                out = new DataOutputStream(bOS);
                out.writeInt(W * H * D);
                out.writeInt(attributes.size());
                System.out.println("Writing");
                for (int t = 0; t < W * H * D; t++) {
                    for (int a = 0; a < attributes.size(); a++) {
                        float v = files.get(a).readFloat();
                        if (v >= 1.0000000e+35) {
                            v = mean[a];
                        }
                        out.writeFloat(v);
                    }
                    //no class
                    out.writeFloat(0.0f);
                }
                System.out.println("End of Writing");
            } catch (java.io.IOException ioE) {
                ioE.printStackTrace();
            } finally {
                if (out != null) {
                    try {
                        for (int a = 0; a < attributes.size(); a++) {
                            files.get(a).close();
                        }
                        bis.close();
                        out.flush();
                        out.close();
                        bOS.flush();
                        bOS.close();
                    } catch (java.io.IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
}//GEN-LAST:event_saveAsPoints_jButtonActionPerformed

    private void saveToPoints() {
        // TODO add your handling code here:
        int result = SaveDialog.showSaveDialog(new DATAFilter(), this);
        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = SaveDialog.getFilename();
//            Normalization norm = NormalizationFactory.getInstance((NormalizationType) this.normalizationComboBox.getSelectedItem());
            ArrayList<String> attributes = new ArrayList<String>();
            ArrayList<RandomAccessFile> files = new ArrayList<RandomAccessFile>();

            for (int i = 0; i < this.featureModel.getRowCount(); i++) {
                String fName = (String) this.featureModel.getValueAt(i, 0);
                String att = (String) this.featureModel.getValueAt(i, 1);
                attributes.add(att);
                try {
                    File f = new File(fName);
                    files.add(new RandomAccessFile(f, "r"));
                } catch (java.io.FileNotFoundException e) {
                    e.printStackTrace();
                }
            }

            int W = 500;
            int H = 500;
            int D = 100;
            BufferedWriter out = null;
            try {
                out = new BufferedWriter(new FileWriter(filename));
                out.write("DY");
                out.write("\r\n");
                out.write(Integer.toString(W * H * D));
                out.write("\r\n");
                for (String a : attributes) {
                    out.write(a + ";");
                }
                out.write("\r\n");

                for (int id = 0; id < W * H * D; id++) {
                    out.write(Integer.toString(id) + ";");
                    for (int a = 0; a < attributes.size(); a++) {
                        out.write(Float.toString(files.get(a).readFloat()) + ";");
                    }
                    out.write("0.0");
                    out.write("\r\n");
                }

            } catch (java.io.IOException ioE) {
                ioE.printStackTrace();
            } finally {
                if (out != null) {
                    try {
                        out.flush();
                        out.close();
                    } catch (java.io.IOException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    }

    private void saveToMatlab(float points[][], float cdata[], String filename) {
        BufferedWriter out = null;
        try {
            out = new BufferedWriter(new FileWriter(filename));
            for (int i = 0; i < points.length; i++) {
                for (int j = 0; j < points[i].length; j++) {
                    out.write(points[i][j] + " ");
                }
                out.write(Float.toString(cdata[i]));
                out.write("\r\n");
            }
        } catch (java.io.IOException ioE) {
            ioE.printStackTrace();
        } finally {
            if (out != null) {
                try {
                    out.flush();
                    out.close();
                } catch (java.io.IOException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }

    private void clearAll_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearAll_jButtonActionPerformed
        // TODO add your handling code here:
        while (this.featureModel.getRowCount() > 0) {
            this.featureModel.removeRow(this.featureModel.getRowCount() - 1);
        }
    }//GEN-LAST:event_clearAll_jButtonActionPerformed

    private DenseMatrix generateMatrix() {
        ArrayList<DenseMatrix> features = new ArrayList<DenseMatrix>();

        Normalization norm = NormalizationFactory.getInstance((NormalizationType) this.normalizationComboBox.getSelectedItem());
        int nCol = 0;
        for (int i = 0; i < this.featureModel.getRowCount(); i++) {
            DenseMatrix d = new DenseMatrix();
            try {
                d.load((String) this.featureModel.getValueAt(i, 0));
                nCol = nCol + d.getDimensions();
                d = (DenseMatrix) norm.execute(d);
                features.add(d);
            } catch (IOException ioe) {
                ioe.printStackTrace();
            }
        }

        float[][] finalM = new float[features.get(0).getRowCount()][nCol];
        int lastIni = 0;
        ArrayList<String> attributes = new ArrayList<String>();
        for (int i = 0; i < this.featureModel.getRowCount(); i++) {
            float[][] m = features.get(i).toMatrix();
            float w = Float.parseFloat((String) this.featureModel.getValueAt(i, 1));
            //getting attributes
            for (String s : features.get(i).getAttributes()) {
                attributes.add(s);
            }
            //weighting
            for (int j = 0; j < m.length; j++) {
                for (int k = 0; k < m[j].length; k++) {
                    finalM[j][lastIni + k] = m[j][k] * w;
                }
            }
            lastIni = lastIni + m[0].length;
        }

        DenseMatrix finalMatrix = new DenseMatrix();
        finalMatrix.setAttributes(attributes);
        for (int i = 0; i < features.get(0).getRowCount(); i++) {
            Vector oldv = features.get(0).getRow(i);
            finalMatrix.addRow(new DenseVector(finalM[i], oldv.getId(), oldv.getKlass()));
        }

        return finalMatrix;
    }

    private String getFilename(String filename) {
        return filename.substring(filename.lastIndexOf("\\") + 1, filename.length());
    }
    private DefaultTableModel featureModel;
    private static MultimodalVolumeReaderView instance;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addFile_jButton;
    private javax.swing.JButton clearAll_jButton;
    private javax.swing.JTextField depth_jTextField;
    private javax.swing.JTable features_jTable;
    private javax.swing.JTextField heigth_jTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox normalizationComboBox;
    private javax.swing.JButton saveAsPoints_jButton;
    private javax.swing.JTextField width_jTextField;
    // End of variables declaration//GEN-END:variables
}
