/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.view.tools;

import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import visualizer.graph.Graph;
import visualizer.util.OpenDialog;
import visualizer.util.Util;
import visualizer.util.filefilter.PROJFilter;
import visualizer.util.filefilter.TITLEFilter;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class ImportProjection extends javax.swing.JDialog {

    private static final long serialVersionUID = 1L;
    public static final int CANCEL_OPTION = 0;
    public static final int IMPORT_OPTION = 1;
    /**
     * Creates new form ImportProjection
     */
    private ImportProjection(javax.swing.JFrame parent) {
        super(parent);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dataPanel = new javax.swing.JPanel();
        projectionLabel = new javax.swing.JLabel();
        projTextField = new javax.swing.JTextField();
        projButton = new javax.swing.JButton();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        descriptionLabel2 = new javax.swing.JLabel();
        descriptionLabel1 = new javax.swing.JLabel();
        titlesLabel = new javax.swing.JLabel();
        titlesTextField = new javax.swing.JTextField();
        titlesButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        importButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Import Projection ");
        setModal(true);

        dataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Files to import"));
        dataPanel.setLayout(new java.awt.GridBagLayout());

        projectionLabel.setText("Projection file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        dataPanel.add(projectionLabel, gridBagConstraints);

        projTextField.setColumns(45);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        dataPanel.add(projTextField, gridBagConstraints);

        projButton.setText("Search...");
        projButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        dataPanel.add(projButton, gridBagConstraints);

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(5);
        descriptionTextArea.setWrapStyleWord(true);
        descriptionScrollPane.setViewportView(descriptionTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        dataPanel.add(descriptionScrollPane, gridBagConstraints);

        descriptionLabel2.setText("Description");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        dataPanel.add(descriptionLabel2, gridBagConstraints);

        descriptionLabel1.setText("Projection");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        dataPanel.add(descriptionLabel1, gridBagConstraints);

        titlesLabel.setText("Titles file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        dataPanel.add(titlesLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        dataPanel.add(titlesTextField, gridBagConstraints);

        titlesButton.setText("Search...");
        titlesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titlesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(2, 3, 2, 3);
        dataPanel.add(titlesButton, gridBagConstraints);

        getContentPane().add(dataPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(importButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void titlesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titlesButtonActionPerformed
        int result = OpenDialog.showOpenDialog(new TITLEFilter(), this);

        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            this.titlesTextField.setText(filename);
        }
}//GEN-LAST:event_titlesButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.exit = ImportProjection.CANCEL_OPTION;
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void importButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importButtonActionPerformed
        try {
            if (projTextField.getText().trim().length() > 0) {
                this.importFile(this.projTextField.getText(), this.titlesTextField.getText());
                this.exit = ImportProjection.IMPORT_OPTION;
                this.setVisible(false);
            } else {
                JOptionPane.showMessageDialog(this,
                        "The PROJECTION filename must be provided!",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_importButtonActionPerformed

    private void projButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projButtonActionPerformed
        int result = OpenDialog.showOpenDialog(new PROJFilter(), this);

        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            this.projTextField.setText(filename);
            this.autoFill(OpenDialog.getJFileChooser());
        }
}//GEN-LAST:event_projButtonActionPerformed

    public static ImportProjection getInstance(javax.swing.JFrame parent) {
        if (instance == null || instance.getParent() != parent) {
            instance = new ImportProjection(parent);
        }
        return instance;
    }

    public Graph display() {
        this.exit = ImportProjection.CANCEL_OPTION;

        this.descriptionTextArea.setText("");
        this.projTextField.setText("");
        this.titlesTextField.setText("");
        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);

        if (this.exit == ImportProjection.CANCEL_OPTION) {
            return null;
        } else {
            return this.graph;
        }
    }

    private void importFile(String projFile, String titlesFile) throws IOException {
        this.graph = Util.importProjection(projFile);

        if (titlesFile.trim().length() > 0) {
            Util.importTitles(graph, titlesFile);
        }
    }

    private void autoFill(JFileChooser file) {
        String filename = file.getSelectedFile().getName();
        String titlefile = filename.substring(0, filename.lastIndexOf('.')) + ".titles";
        File[] files = file.getCurrentDirectory().listFiles();

        for (File f : files) {
            if (titlefile.equals(f.getName())) {
                this.titlesTextField.setText(f.getAbsolutePath());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ImportProjection(null).setVisible(true);
            }

        });
    }

    private static ImportProjection instance;
    private int exit = ImportProjection.CANCEL_OPTION;
    private Graph graph;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JLabel descriptionLabel1;
    private javax.swing.JLabel descriptionLabel2;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JButton importButton;
    private javax.swing.JButton projButton;
    private javax.swing.JTextField projTextField;
    private javax.swing.JLabel projectionLabel;
    private javax.swing.JButton titlesButton;
    private javax.swing.JLabel titlesLabel;
    private javax.swing.JTextField titlesTextField;
    // End of variables declaration//GEN-END:variables
}
