/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.view.tools;

import java.io.IOException;
import javax.swing.JOptionPane;
import visualizer.util.OpenDialog;
import visualizer.util.SaveDialog;
import visualizer.util.TextFromPDF;
import visualizer.util.filefilter.DIRFilter;
import visualizer.util.filefilter.ZIPFilter;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class CreatePDFCorpora extends javax.swing.JDialog {

    /** Creates new form CreatePDFCorpora */
    private CreatePDFCorpora(javax.swing.JFrame parent) {
        super(parent);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        dataPanel = new javax.swing.JPanel();
        statusScrollPane = new javax.swing.JScrollPane();
        statusTextArea = new javax.swing.JTextArea();
        corporaLabel = new javax.swing.JLabel();
        directoryLabel = new javax.swing.JLabel();
        directoryTextField = new javax.swing.JTextField();
        corporaTextField = new javax.swing.JTextField();
        directoryButton = new javax.swing.JButton();
        corporaButton = new javax.swing.JButton();
        buttonPanel = new javax.swing.JPanel();
        createButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Corpus From PDF Files");
        setModal(true);
        setResizable(false);
        dataPanel.setLayout(new java.awt.GridBagLayout());

        dataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data for Creation"));
        statusScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Status"));
        statusTextArea.setColumns(20);
        statusTextArea.setEditable(false);
        statusTextArea.setRows(5);
        statusScrollPane.setViewportView(statusTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        dataPanel.add(statusScrollPane, gridBagConstraints);

        corporaLabel.setText("Corpus");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataPanel.add(corporaLabel, gridBagConstraints);

        directoryLabel.setText("Directory");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataPanel.add(directoryLabel, gridBagConstraints);

        directoryTextField.setColumns(40);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataPanel.add(directoryTextField, gridBagConstraints);

        corporaTextField.setColumns(40);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataPanel.add(corporaTextField, gridBagConstraints);

        directoryButton.setText("Search...");
        directoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directoryButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataPanel.add(directoryButton, gridBagConstraints);

        corporaButton.setText("Search...");
        corporaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corporaButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        dataPanel.add(corporaButton, gridBagConstraints);

        getContentPane().add(dataPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        createButton.setText("Create");
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(createButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        if (this.corporaTextField.getText().trim().length() > 0 &&
                this.directoryTextField.getText().trim().length() > 0) {

            try {
                this.cancelButton.setEnabled(false);
                TextFromPDF extractor = new TextFromPDF();
                extractor.extract(this.statusTextArea, 
                        this.directoryTextField.getText(), 
                        this.corporaTextField.getText());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage(), 
                        "Error", JOptionPane.WARNING_MESSAGE);
            }

            this.cancelButton.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(this, 
                    "The corpus and directory fields must be filled!", 
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_createButtonActionPerformed

    private void corporaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corporaButtonActionPerformed
        String filename = "corpus.zip";
        if (this.directoryTextField.getText().trim().length() > 0) {
            filename = this.directoryTextField.getText();
            filename = filename.substring(filename.lastIndexOf("\\") + 1, filename.length()) + ".zip";
        }

        int result = SaveDialog.showSaveDialog(new ZIPFilter(), this, filename);

        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            filename = SaveDialog.getFilename();
            this.corporaTextField.setText(filename);
        }
    }//GEN-LAST:event_corporaButtonActionPerformed

    private void directoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_directoryButtonActionPerformed
        OpenDialog.getJFileChooser().setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        int result = OpenDialog.showOpenDialog(new DIRFilter(), this);

        if (result == javax.swing.JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            this.directoryTextField.setText(filename);
        }

        OpenDialog.getJFileChooser().setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
    }//GEN-LAST:event_directoryButtonActionPerformed

    public static CreatePDFCorpora getInstance(javax.swing.JFrame parent) {
        if (instance == null || instance.getParent() != parent) {
            instance = new CreatePDFCorpora(parent);
        }
        return instance;
    }

    public void display() {
        this.corporaTextField.setText("");
        this.directoryTextField.setText("");
        this.statusTextArea.setText("");
        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new CreatePDFCorpora(null).setVisible(true);
            }

        });
    }
    
    private static CreatePDFCorpora instance;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton corporaButton;
    private javax.swing.JLabel corporaLabel;
    private javax.swing.JTextField corporaTextField;
    private javax.swing.JButton createButton;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JButton directoryButton;
    private javax.swing.JLabel directoryLabel;
    private javax.swing.JTextField directoryTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane statusScrollPane;
    private javax.swing.JTextArea statusTextArea;
    // End of variables declaration//GEN-END:variables
}
