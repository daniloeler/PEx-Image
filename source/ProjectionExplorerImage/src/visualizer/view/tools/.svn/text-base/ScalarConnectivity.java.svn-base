/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */
package visualizer.view.tools;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import visualizer.graph.Graph;
import visualizer.graph.Connectivity;
import visualizer.graph.Scalar;
import visualizer.matrix.Matrix;
import visualizer.matrix.MatrixFactory;
import visualizer.projection.distance.Dissimilarity;
import visualizer.projection.distance.DissimilarityFactory;
import visualizer.projection.distance.DissimilarityType;
import visualizer.projection.distance.DistanceMatrix;
import visualizer.util.OpenDialog;
import visualizer.util.Pair;
import visualizer.util.ScalarNeighbors;
import visualizer.util.filefilter.DATAFilter;
import visualizer.util.filefilter.DMATFilter;

/**
 *
 * @author Gabriel de Faria Andery
 */
public class ScalarConnectivity extends javax.swing.JDialog {

    /** Creates new form KnnConnectivity */
    private ScalarConnectivity(javax.swing.JFrame parent) {
        super(parent);
        initComponents();
        
        for (DissimilarityType disstype : DissimilarityType.getTypes()) {
            if (disstype != DissimilarityType.KOLMOGOROV && disstype != DissimilarityType.NONE) {
                this.distanceComboBox.addItem(disstype);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        sourceButtonGroup = new javax.swing.ButtonGroup();
        dataPanel = new javax.swing.JPanel();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        nameComboBox = new javax.swing.JComboBox();
        inuseLabel = new javax.swing.JLabel();
        knnCheckBox = new javax.swing.JCheckBox();
        knnPanel = new javax.swing.JPanel();
        sourcePanel = new javax.swing.JPanel();
        pointsRadioButton = new javax.swing.JRadioButton();
        distanceMatrixRadioButton = new javax.swing.JRadioButton();
        distanceMatrixTextField = new javax.swing.JTextField();
        pointsTextField = new javax.swing.JTextField();
        pointsButton = new javax.swing.JButton();
        distanceMatrixButton = new javax.swing.JButton();
        chooseDistanceTypePanel2 = new javax.swing.JPanel();
        distanceComboBox = new javax.swing.JComboBox();
        numberNeighborsPanel = new javax.swing.JPanel();
        knnConnectivityLabel = new javax.swing.JLabel();
        knnConnectivityComboBox = new javax.swing.JComboBox();
        buttonPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Scalar Connectivity");
        setModal(true);

        dataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Scalar Connectivity Parameters"));
        dataPanel.setLayout(new java.awt.GridBagLayout());

        nameLabel.setText("Connectivity Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 3, 3);
        dataPanel.add(nameLabel, gridBagConstraints);

        nameTextField.setColumns(20);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 3, 3);
        dataPanel.add(nameTextField, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 3, 3);
        dataPanel.add(nameComboBox, gridBagConstraints);

        inuseLabel.setText("In use");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 3, 3, 3);
        dataPanel.add(inuseLabel, gridBagConstraints);

        knnCheckBox.setText("Use KNN Connectivity");
        knnCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                knnCheckBoxActionPerformed(evt);
            }
        });
        dataPanel.add(knnCheckBox, new java.awt.GridBagConstraints());

        knnPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("KNN Options"));
        knnPanel.setEnabled(false);
        knnPanel.setLayout(new java.awt.GridBagLayout());

        sourcePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Source File"));
        sourcePanel.setEnabled(false);
        sourcePanel.setLayout(new java.awt.GridBagLayout());

        sourceButtonGroup.add(pointsRadioButton);
        pointsRadioButton.setSelected(true);
        pointsRadioButton.setText("Points File");
        pointsRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        pointsRadioButton.setEnabled(false);
        pointsRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        pointsRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(pointsRadioButton, gridBagConstraints);

        sourceButtonGroup.add(distanceMatrixRadioButton);
        distanceMatrixRadioButton.setText("Distance File");
        distanceMatrixRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        distanceMatrixRadioButton.setEnabled(false);
        distanceMatrixRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        distanceMatrixRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceMatrixRadioButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(distanceMatrixRadioButton, gridBagConstraints);

        distanceMatrixTextField.setColumns(35);
        distanceMatrixTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(distanceMatrixTextField, gridBagConstraints);

        pointsTextField.setColumns(35);
        pointsTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(pointsTextField, gridBagConstraints);

        pointsButton.setText("Search...");
        pointsButton.setEnabled(false);
        pointsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pointsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(pointsButton, gridBagConstraints);

        distanceMatrixButton.setText("Search...");
        distanceMatrixButton.setEnabled(false);
        distanceMatrixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceMatrixButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        sourcePanel.add(distanceMatrixButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        knnPanel.add(sourcePanel, gridBagConstraints);

        chooseDistanceTypePanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose the Distance Type"));
        chooseDistanceTypePanel2.setEnabled(false);
        chooseDistanceTypePanel2.setLayout(new java.awt.GridBagLayout());

        distanceComboBox.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        chooseDistanceTypePanel2.add(distanceComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        knnPanel.add(chooseDistanceTypePanel2, gridBagConstraints);

        numberNeighborsPanel.setLayout(new java.awt.GridBagLayout());

        knnConnectivityLabel.setText("Number Neighbors");
        knnConnectivityLabel.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        numberNeighborsPanel.add(knnConnectivityLabel, gridBagConstraints);

        knnConnectivityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        knnConnectivityComboBox.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        numberNeighborsPanel.add(knnConnectivityComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 4, 0);
        knnPanel.add(numberNeighborsPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        dataPanel.add(knnPanel, gridBagConstraints);

        getContentPane().add(dataPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        okButton.setText("Create");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(cancelButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (knnCheckBox.isSelected()) {
            if (pointsRadioButton.isSelected()) {
                if (this.pointsTextField.getText().trim().length() > 0) {
                    try {
                        Matrix matrix = MatrixFactory.getInstance(this.pointsTextField.getText());

                        DissimilarityType mtype = (DissimilarityType) this.distanceComboBox.getSelectedItem();
                        Dissimilarity diss = DissimilarityFactory.getInstance(mtype);

                        DistanceMatrix dmat = new DistanceMatrix(matrix, diss);
                        int numberNeighbors = this.knnConnectivityComboBox.getSelectedIndex() + 1;

                        String conname = this.nameTextField.getText();
                        this.connectivity = new Connectivity(conname);

                        ScalarNeighbors sn = new ScalarNeighbors(graph.getVertex(), currentScalar, numberNeighbors);
                        Pair[][] neighborhood = sn.execute(dmat);
                        this.connectivity.create(this.graph.getVertex(), neighborhood);
                        this.graph.addConnectivity(this.connectivity);
                    } catch (IOException ex) {
                        Logger.getLogger(ScalarConnectivity.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else {
                    javax.swing.JOptionPane.showMessageDialog(this,
                        "The DISTANCE MATRIX file must be provided!",
                        "WARNING", javax.swing.JOptionPane.WARNING_MESSAGE);
                }
            }
            else {
                if (this.distanceMatrixTextField.getText().trim().length() > 0) {
                    try {
                        DistanceMatrix dmat = new DistanceMatrix(this.distanceMatrixTextField.getText());
                        int numberNeighbors = this.knnConnectivityComboBox.getSelectedIndex() + 1;

                        String conname = this.nameTextField.getText();
                        this.connectivity = new Connectivity(conname);

                        ScalarNeighbors sn = new ScalarNeighbors(graph.getVertex(), currentScalar, numberNeighbors);
                        Pair[][] neighborhood = sn.execute(dmat);
                        this.connectivity.create(this.graph.getVertex(), neighborhood);
                        this.graph.addConnectivity(this.connectivity);
                    } catch (IOException ex) {
                        Logger.getLogger(ScalarConnectivity.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                else {
                    javax.swing.JOptionPane.showMessageDialog(this,
                        "The DISTANCE MATRIX file must be provided!",
                        "WARNING", javax.swing.JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        else {
            try {
                String conname = this.nameTextField.getText();
                this.connectivity = new Connectivity(conname);

                ScalarNeighbors sn = new ScalarNeighbors(graph.getVertex(), currentScalar, 0);
                Pair[][] neighborhood = sn.execute();
                this.connectivity.create(this.graph.getVertex(), neighborhood);
                this.graph.addConnectivity(this.connectivity);
            } catch (IOException ex) {
                Logger.getLogger(ScalarConnectivity.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

private void knnCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_knnCheckBoxActionPerformed
    if (knnCheckBox.isSelected()) {
        knnConnectivityLabel.setEnabled(true);
        knnConnectivityComboBox.setEnabled(true);
        if (pointsRadioButton.isSelected()) {
            pointsRadioButton.setEnabled(true);
            pointsTextField.setEnabled(true);
            pointsButton.setEnabled(true);
            distanceMatrixRadioButton.setEnabled(true);
            distanceMatrixTextField.setEnabled(false);
            distanceMatrixButton.setEnabled(false);
            distanceComboBox.setEnabled(true);
        }
        else {
            pointsRadioButton.setEnabled(true);
            pointsTextField.setEnabled(false);
            pointsButton.setEnabled(false);
            distanceMatrixRadioButton.setEnabled(true);
            distanceMatrixTextField.setEnabled(true);
            distanceMatrixButton.setEnabled(true);
            distanceComboBox.setEnabled(false);
        }
    } else {
        pointsRadioButton.setEnabled(false);
        pointsTextField.setEnabled(false);
        pointsButton.setEnabled(false);
        distanceMatrixRadioButton.setEnabled(false);
        distanceMatrixTextField.setEnabled(false);
        distanceMatrixButton.setEnabled(false);
        distanceComboBox.setEnabled(false);
        knnConnectivityLabel.setEnabled(false);
        knnConnectivityComboBox.setEnabled(false);
    }
}//GEN-LAST:event_knnCheckBoxActionPerformed

private void pointsRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsRadioButtonActionPerformed
this.distanceMatrixButton.setEnabled(false);
        this.distanceMatrixTextField.setEnabled(false);

        this.pointsButton.setEnabled(true);
        this.pointsTextField.setEnabled(true);

        this.distanceMatrixTextField.setText("");
        this.distanceComboBox.setEnabled(true);
}//GEN-LAST:event_pointsRadioButtonActionPerformed

private void distanceMatrixRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceMatrixRadioButtonActionPerformed
this.distanceMatrixButton.setEnabled(true);
        this.distanceMatrixTextField.setEnabled(true);

        this.pointsButton.setEnabled(false);
        this.pointsTextField.setEnabled(false);

        this.pointsTextField.setText("");
        this.distanceComboBox.setEnabled(false);
}//GEN-LAST:event_distanceMatrixRadioButtonActionPerformed

private void pointsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pointsButtonActionPerformed
int result = OpenDialog.showOpenDialog(new DATAFilter(), this);

        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            this.pointsTextField.setText(filename);
        }
}//GEN-LAST:event_pointsButtonActionPerformed

private void distanceMatrixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceMatrixButtonActionPerformed
int result = OpenDialog.showOpenDialog(new DMATFilter(), this);

        if (result == JFileChooser.APPROVE_OPTION) {
            String filename = OpenDialog.getFilename();
            this.distanceMatrixTextField.setText(filename);
        }
}//GEN-LAST:event_distanceMatrixButtonActionPerformed

    public static ScalarConnectivity getInstance(javax.swing.JFrame parent) {
        if (instance == null || instance.getParent() != parent) {
            instance = new ScalarConnectivity(parent);
        }
        return instance;
    }

    public Connectivity display(Graph graph, Scalar currentScalar) {
        this.graph = graph;
        this.currentScalar = currentScalar;
        this.connectivity = null;
        
        this.knnCheckBox.setSelected(false);
        pointsRadioButton.setEnabled(false);
        pointsTextField.setEnabled(false);
        pointsButton.setEnabled(false);
        distanceMatrixRadioButton.setEnabled(false);
        distanceMatrixTextField.setEnabled(false);
        distanceMatrixButton.setEnabled(false);
        distanceComboBox.setEnabled(false);
        knnConnectivityLabel.setEnabled(false);
        knnConnectivityComboBox.setEnabled(false);
        
        this.knnConnectivityComboBox.setSelectedIndex(0);
        
        String dmatFileName = this.graph.getProjectionData().getSourceFile().substring(0, this.graph.getProjectionData().getSourceFile().length() - 4) + ".dmat";
        if ((new File(dmatFileName)).exists()) {
            this.distanceMatrixTextField.setText(dmatFileName);
        }
        else this.distanceMatrixTextField.setText("");
        
        this.nameComboBox.removeAllItems();
        for (Connectivity con : this.graph.getConnectivities()) {
            this.nameComboBox.addItem(con.getName());
        }

        String conname = "Scalars: " + currentScalar.getName();
        this.nameTextField.setText(conname);

        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);

        return this.connectivity;
    }    //private JFileChooser file = new JFileChooser();
    private static ScalarConnectivity instance;
    private Connectivity connectivity;
    private Graph graph;
    private Scalar currentScalar;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel chooseDistanceTypePanel2;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JComboBox distanceComboBox;
    private javax.swing.JButton distanceMatrixButton;
    private javax.swing.JRadioButton distanceMatrixRadioButton;
    private javax.swing.JTextField distanceMatrixTextField;
    private javax.swing.JLabel inuseLabel;
    private javax.swing.JCheckBox knnCheckBox;
    private javax.swing.JComboBox knnConnectivityComboBox;
    private javax.swing.JLabel knnConnectivityLabel;
    private javax.swing.JPanel knnPanel;
    private javax.swing.JComboBox nameComboBox;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JPanel numberNeighborsPanel;
    private javax.swing.JButton okButton;
    private javax.swing.JButton pointsButton;
    private javax.swing.JRadioButton pointsRadioButton;
    private javax.swing.JTextField pointsTextField;
    private javax.swing.ButtonGroup sourceButtonGroup;
    private javax.swing.JPanel sourcePanel;
    // End of variables declaration//GEN-END:variables
}
