/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package visualizer.view;

import br.com.grafos.ui.Menu;
import br.com.metodos.overlap.hexboard.HexBoardExecutor;
import br.com.metodos.overlap.incboard.IncBoardExecutor;
import br.com.metodos.overlap.incboard.PontoItem;
import br.com.metodos.overlap.prism.PRISM;
import br.com.metodos.overlap.projsnippet.ProjSnippet;
import br.com.metodos.overlap.rwordle.RWordleC;
import br.com.metodos.overlap.rwordle.RWordleL;
import br.com.metodos.overlap.vpsc.VPSC;
import br.com.metodos.utils.Retangulo;
import br.com.metodos.utils.Util;
import java.awt.Polygon;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import visualizer.graph.Graph;
import visualizer.graph.Vertex;

/**
 *
 * @author wilson
 */
public class RemoveOverlapView extends javax.swing.JFrame {
    private Graph graph;
    private Viewer gv;
    private ButtonGroup group;
    private int resultadoVPSC = 0;
    /**
     * Creates new form RemoveOverlapView
     */
    public RemoveOverlapView() {
        initComponents();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);
        resultadoVPSC = 0;
                 
        graph = null;        
        group = new ButtonGroup();
        group.add(rWordleCJRadioButton);
        group.add(rWordleLJRadioButton);
        group.add(vpscJRadioButton);
        group.add(prismJRadioButton);
        group.add(projSnippetJRadioButton);
        group.add(incBoardJRadioButton);
        group.add(hexBoardJRadioButton);
        
        rWordleCJRadioButton.setSelected(true);
    }
    
    public void setViewer(Viewer gv) {
        this.graph = gv.getGraph();
        this.gv = gv;
    }
    
    private ArrayList<Retangulo> formRectangles() {
        ArrayList<Vertex> vertices = graph.getVertex();
        ArrayList<Retangulo> retangulos = new ArrayList<>();        
        
        // forma os retângulos de acordo com a visualização 
        for( int i = 0; i < vertices.size(); ++i ) {
            if( vertices.get(i).isDrawAsImages() ) {
                int w = vertices.get(i).getImage().getWidth(null);
                int h = vertices.get(i).getImage().getHeight(null);
                int x = ((int) vertices.get(i).getX()) - w/2;
                int y = ((int) vertices.get(i).getY()) - h/2;
                if( Vertex.isDrawClassOnImage() ) {
                    x -= 2;
                    y -= 2;
                    w += 3;
                    h += 3;
                }
                retangulos.add(new Retangulo(x, y, w, h));
            } else {
                
                int x = ((int) vertices.get(i).getX()) - vertices.get(i).getRay();
                int y = ((int) vertices.get(i).getY()) - vertices.get(i).getRay();
                int raio = vertices.get(i).getRay()*2;
                retangulos.add(new Retangulo(x, y, raio, raio));
            }
            
        }
        
        return retangulos; 
    }
    
        /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        iniciarJButton = new javax.swing.JButton();
        rWordleCJRadioButton = new javax.swing.JRadioButton();
        rWordleLJRadioButton = new javax.swing.JRadioButton();
        vpscJRadioButton = new javax.swing.JRadioButton();
        prismJRadioButton = new javax.swing.JRadioButton();
        projSnippetJRadioButton = new javax.swing.JRadioButton();
        incBoardJRadioButton = new javax.swing.JRadioButton();
        hexBoardJRadioButton = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        anguloJTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        recentralizarJRadioButton = new javax.swing.JRadioButton();
        matrizEsparsaJCheckBox = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        iniciarJButton.setText("Iniciar");
        iniciarJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarJButtonActionPerformed(evt);
            }
        });

        rWordleCJRadioButton.setText("RWordle-C");

        rWordleLJRadioButton.setText("RWordle-L");

        vpscJRadioButton.setText("VPSC");

        prismJRadioButton.setText("PRISM");

        projSnippetJRadioButton.setText("ProjSnippet");

        incBoardJRadioButton.setText("IncBoard");

        hexBoardJRadioButton.setText("HexBoard");

        jLabel1.setText("Atenção: As técnicas IncBoard e HexBoard mudarão a projeção.");

        anguloJTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anguloJTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Ângulo:");

        recentralizarJRadioButton.setText("Recentralizar");

        matrizEsparsaJCheckBox.setText("Usar estrutura Yale");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(vpscJRadioButton)
                    .addComponent(rWordleCJRadioButton)
                    .addComponent(projSnippetJRadioButton)
                    .addComponent(incBoardJRadioButton)
                    .addComponent(hexBoardJRadioButton)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(iniciarJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rWordleLJRadioButton)
                            .addComponent(prismJRadioButton))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matrizEsparsaJCheckBox)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(anguloJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(recentralizarJRadioButton)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rWordleCJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rWordleLJRadioButton)
                    .addComponent(anguloJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(recentralizarJRadioButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(vpscJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prismJRadioButton)
                    .addComponent(matrizEsparsaJCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(projSnippetJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(incBoardJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(hexBoardJRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(iniciarJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarJButtonActionPerformed
        ArrayList<Retangulo> reprojected = null;
        
        if( rWordleCJRadioButton.isSelected() ) {
            ArrayList<Retangulo> rects = formRectangles();
            double[] center0 = Util.getCenter(rects);
            reprojected = RWordleC.apply(rects);
            double[] center1 = Util.getCenter(reprojected);
            
            double ammountX = center0[0]-center1[0];
            double ammountY = center0[1]-center1[1];
            Util.translate(reprojected, ammountX, ammountY);
            Util.normalize(reprojected);
            
        } else if( rWordleLJRadioButton.isSelected() ) {
            double alpha;
            try {
                alpha = Double.parseDouble(anguloJTextField.getText());
            } catch( NumberFormatException e ) {
                JOptionPane.showMessageDialog(this, "Insira um valor correto para 'alpha'.", "Parâmetro incorreto", WIDTH);
                return;
            }

            ArrayList<Retangulo> rects = formRectangles();
            double[] center0 = Util.getCenter(rects);
            reprojected  = RWordleL.apply(rects, alpha, recentralizarJRadioButton.isSelected());
            double[] center1 = Util.getCenter(reprojected);

            double ammountX = center0[0]-center1[0];
            double ammountY = center0[1]-center1[1];
            Util.translate(reprojected, ammountX, ammountY);
            Util.normalize(reprojected);
            
        } else if( vpscJRadioButton.isSelected() ) {
            
            
            ArrayList<Retangulo> rects = formRectangles();
            double[] center0 = Util.getCenter(rects);
            reprojected = VPSC.apply(rects);
            double[] center1 = Util.getCenter(reprojected);

            int i = 0;
            for( Retangulo r: reprojected ) 
                r.setId(i++);       

            double ammountX = center0[0]-center1[0];
            double ammountY = center0[1]-center1[1];
            Util.translate(reprojected, ammountX, ammountY);
            Util.normalize(reprojected);
            
//            ArrayList<Retangulo> rects = formRectangles();
//            double[] center0 = Util.getCenter(rects);
//            try {
//                File file = new File("vpsc_points.in");        
//                if( !file.exists() )
//                    file.createNewFile();
//
//                /**
//                 *  salva as coordenadas e as dimensões dos retângulos
//                 */
//                FileWriter fw = new FileWriter(file.getAbsoluteFile());
//                try( BufferedWriter bw = new BufferedWriter(fw) ) {
//                    bw.write(rects.size()+"\n");
//                    for( Retangulo r: rects )
//                        bw.write(r.getUX()+" "+r.getLY()+" "+r.getWidth()+" "+r.getHeight()+"\n");
//                }            
//                
//                try {
//                    final Process p = Runtime.getRuntime().exec("cmd /c VPSCTest.exe");
//                    System.out.println("Esperando rotina C++");
//                    new Runnable() {
//
//                        @Override
//                        public void run() {
//                            try {  
//                                resultadoVPSC = p.waitFor();
//                            } catch (InterruptedException ex) {
//                                Logger.getLogger(ProjSnippet.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                        }
//                    }.run();
//
//                } catch (IOException ex) {
//                    Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
//                }
//
//                System.out.println("Recuperando resultados...");
//                if( resultadoVPSC == 0 ) {
//
//
//                    Scanner scn = new Scanner(new File("vpsc_points.out"));
//                    double minX, maxX, minY, maxY;
//                    reprojected = new ArrayList<>();
//                    int i = 0;
//                    while( scn.hasNext() ) {
//                        String[] str = scn.nextLine().split(" ");
//                        minX = Double.parseDouble(str[0]);
//                        minY = Double.parseDouble(str[1]);
//                        maxX = Double.parseDouble(str[2]);
//                        maxY = Double.parseDouble(str[3]);
//                        reprojected.add(new Retangulo(minX, minY, maxX-minX, maxY-minY, rects.get(i).getId()));
//                    }
//                }
//            
//            } catch( Exception e ) {
//                System.out.println("Ocorreu um erro: "+e);
//            }
//            
//            double[] center1 = Util.getCenter(reprojected);
//
//            int i = 0;
//            for( Retangulo r: reprojected ) 
//                r.setId(i++);       
//
//            double ammountX = center0[0]-center1[0];
//            double ammountY = center0[1]-center1[1];
//            Util.translate(reprojected, ammountX, ammountY);
//            Util.normalize(reprojected);
//            
            
        } else if( prismJRadioButton.isSelected() ) {
            
            ArrayList<Retangulo> rects = formRectangles();
            double[] center0 = Util.getCenter(rects);
            int algo = matrizEsparsaJCheckBox.isSelected() ? 1 : 0;            
            reprojected = PRISM.apply(rects, algo);
            double[] center1 = Util.getCenter(reprojected);

            int i = 0;
            for( Retangulo r: reprojected )
                r.setId(i++);        

            double ammountX = center0[0]-center1[0];
            double ammountY = center0[1]-center1[1];
            Util.translate(reprojected, ammountX, ammountY);
            Util.normalize(reprojected);
            
        } else if( projSnippetJRadioButton.isSelected() ) {
            
            ArrayList<Retangulo> rects = formRectangles();
        
            int i = 0;
            for( Retangulo r: rects )
                r.setId(i++);
            double[] center0 = Util.getCenter(rects);

            String alpha_value = JOptionPane.showInputDialog("Por favor, insira o valor para 'alpha':");
            String k_value = JOptionPane.showInputDialog("Por favor, insira o valor de 'k':");


            reprojected = ProjSnippet.apply(rects, Double.parseDouble(alpha_value), Integer.parseInt(k_value)+1);
            if( reprojected != null ) {

                double[] center1 = Util.getCenter(reprojected);
                i = 0;
                for( Retangulo r: reprojected )
                    r.setId(i++);        

                double ammountX = center0[0]-center1[0];
                double ammountY = center0[1]-center1[1];
                Util.translate(reprojected, ammountX, ammountY);
                Util.normalize(reprojected);
                
            } else
                JOptionPane.showMessageDialog(this, "Houve um problema ao aplicar o método Projsnippet.");
            
        } else if( incBoardJRadioButton.isSelected() ) {
            
            try {
                ArrayList<Retangulo> rects = formRectangles();
                File file = new File(graph.getProjectionData().getSourceFile());

                ArrayList<PontoItem> items = new ArrayList<>();
                Scanner scn = new Scanner(file);
                for( int i = 0; i < 2; ++i )
                    if( scn.hasNext() )
                        scn.nextLine();
                
                int dimensoes = Integer.parseInt(scn.nextLine());
                scn.nextLine();
                
                System.out.println("Quantidade de dimensões: "+dimensoes);
            
                int id = 0;
                while( scn.hasNext() ) {
                    String[] linha = scn.nextLine().split(";");
                    double[] dims = new double[dimensoes];
                    for( int i = 0; i < dims.length; ++i )
                        dims[i] = 0;
                        
                    for( int i = 1, j = 0; i < linha.length-1; ++i, ++j ) {
                        dims[j] = Double.parseDouble(linha[i]);
                    }
                    
                    items.add(new PontoItem(dims, String.valueOf(id), id, 0));
                    id++;
                }
                System.out.println("Quantidade de elementos: "+items.size());
                IncBoardExecutor executor = new IncBoardExecutor();
                executor.apply(items);
                
                int ymin = Math.abs(executor.getMinRow());
                int xmin = Math.abs(executor.getMinCol());
                reprojected = new ArrayList<>();
                int w = (int) rects.get(0).getWidth();
                int h = (int) rects.get(0).getHeight();
                int offset = 50;
                for( PontoItem d: executor.getItems() ) {
                    Retangulo r = new Retangulo(w*(d.getCol()+xmin) + offset, h*(d.getRow()+ymin) + offset, w, h);
                    r.setId(d.getId());
                    reprojected.add(r);
                }
                
            } catch( IOException e ) {
                
            }
        } else if( hexBoardJRadioButton.isSelected() ) {
            
            try {
                File file = new File(graph.getProjectionData().getSourceFile());
                ArrayList<Retangulo> rects = formRectangles();               
                
                ArrayList<PontoItem> items = new ArrayList<>();
                Scanner scn = new Scanner(file);
                for( int i = 0; i < 2; ++i )
                    if( scn.hasNext() )
                        scn.nextLine();
                
                int dimensoes = Integer.parseInt(scn.nextLine());
                scn.nextLine();
                
                System.out.println("Quantidade de dimensões: "+dimensoes);
            
                int id = 0;
                while( scn.hasNext() ) {
                    String[] linha = scn.nextLine().split(";");
                    double[] dims = new double[dimensoes];
                    for( int i = 0; i < dims.length; ++i )
                        dims[i] = 0;
                        
                    for( int i = 1, j = 0; i < linha.length-1; ++i, ++j ) {
                        dims[j] = Double.parseDouble(linha[i]);
                    }
                              
                    items.add(new PontoItem(dims, String.valueOf(id), id, 0));
                    ++id;
                }

                HexBoardExecutor executor = new HexBoardExecutor();
                executor.apply(items);

                int zMin = executor.getMinRow()-executor.getMinCol();
                
                int minDist = Integer.MAX_VALUE;
                PontoItem q = null;
                int zMIN = Integer.MAX_VALUE;
                for( PontoItem d: executor.getItems() ) {
                    int z = d.getRow()-d.getCol();
                    if( z < zMIN )
                        zMIN = z;
                    int x;
                    if( zMin > z )
                        x = executor.getMinRow()+((Math.abs(zMin)+Math.abs(z))/2);
                    else
                        x = executor.getMinRow()-((Math.abs(zMin)+Math.abs(z))/2);
                    int dist = d.getCol()-x;
                    if( dist < minDist ) {
                        minDist = dist;
                        q = d;
                    }                    
                }
                
                int w = (int) rects.get(0).getWidth();
                int xmin = 30;
                int a = (int) Math.sqrt(w*w - Math.pow(w/2, 2));
                
                int offset = 100;
                
                reprojected = new ArrayList<>();
                ((ProjectionViewer)gv).setBoard(true);
                        
                for( PontoItem d: executor.getItems() ) {
                    int z = d.getRow() - d.getCol();
                    
                    // até hoje não sei como consegui converter aquele padrão maluco em coordenadas (x,y)
                    int centerHexY = (3*w/2) * (z + Math.abs(zMIN)) + w;
                    int distancia = (Math.abs(q.getRow() - d.getRow()) + Math.abs(q.getCol()-d.getCol())) * a + xmin;

                    Retangulo r = new Retangulo(distancia - (w/2) + offset, centerHexY - (w/2) + offset, w, w);
                    r.setId(d.getId());
                    reprojected.add(r);
                    
                    int x = distancia+offset;
                    int y = centerHexY+offset;
                    
                    Polygon poly = new Polygon();
                    poly.addPoint(x, y - w);
                    poly.addPoint(x + a, y - w/2);
                    poly.addPoint(x + a, y + w/2);
                    poly.addPoint(x, y + w);
                    poly.addPoint(x - a, y + w/2);
                    poly.addPoint(x - a, y - w/2);
                    
                    ((ProjectionViewer)gv).addPolygonBoard(poly);
                }
            } catch( IOException e ) {
                
            }
        }
        
        if( reprojected != null ) {        
            ArrayList<Vertex> vertices = graph.getVertex();
            for( int i = 0; i < vertices.size(); ++i ) {
                vertices.get(reprojected.get(i).getId()).setX((float) reprojected.get(i).getCenterX());
                vertices.get(reprojected.get(i).getId()).setY((float) reprojected.get(i).getCenterY());
            }
            gv.updateImage();
        }
        dispose();
    }//GEN-LAST:event_iniciarJButtonActionPerformed

    private void anguloJTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anguloJTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_anguloJTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RemoveOverlapView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RemoveOverlapView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RemoveOverlapView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RemoveOverlapView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RemoveOverlapView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField anguloJTextField;
    private javax.swing.JRadioButton hexBoardJRadioButton;
    private javax.swing.JRadioButton incBoardJRadioButton;
    private javax.swing.JButton iniciarJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JCheckBox matrizEsparsaJCheckBox;
    private javax.swing.JRadioButton prismJRadioButton;
    private javax.swing.JRadioButton projSnippetJRadioButton;
    private javax.swing.JRadioButton rWordleCJRadioButton;
    private javax.swing.JRadioButton rWordleLJRadioButton;
    private javax.swing.JRadioButton recentralizarJRadioButton;
    private javax.swing.JRadioButton vpscJRadioButton;
    // End of variables declaration//GEN-END:variables
}
