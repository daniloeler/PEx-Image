/*
 * DistanceMatrixConverterView.java
 *
 * Created on 10 de Dezembro de 2008, 10:30
 */
package visualizer.converters;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JFileChooser;
import visualizer.projection.distance.DistanceMatrix;
import visualizer.util.OpenDialog;
import visualizer.util.SaveDialog;
import visualizer.util.Util;
import visualizer.util.filefilter.DMATFilter;
import visualizer.util.filefilter.NAMESFilter;

/**
 *
 * @author  Danilo M Eler
 */
public class DistanceMatrixConverterView extends javax.swing.JFrame {

    /** Creates new form DistanceMatrixConverterView */
    public DistanceMatrixConverterView() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        distanceMatrixTextField = new javax.swing.JTextField();
        distanceMatrixButton = new javax.swing.JButton();
        oldDmatLabel = new javax.swing.JLabel();
        namesLabel = new javax.swing.JLabel();
        newDmatLabel = new javax.swing.JLabel();
        namesTextField = new javax.swing.JTextField();
        namesButton = new javax.swing.JButton();
        newMatrixFile_TextField = new javax.swing.JTextField();
        newMatrixFile_jButton = new javax.swing.JButton();
        convert_jButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Distance Matrix File Converter");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        distanceMatrixTextField.setColumns(35);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(distanceMatrixTextField, gridBagConstraints);

        distanceMatrixButton.setText("Search...");
        distanceMatrixButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                distanceMatrixButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(distanceMatrixButton, gridBagConstraints);

        oldDmatLabel.setText("Old Matrix File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(oldDmatLabel, gridBagConstraints);

        namesLabel.setText("Old Names File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(namesLabel, gridBagConstraints);

        newDmatLabel.setText("New Matrix File");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(newDmatLabel, gridBagConstraints);

        namesTextField.setColumns(40);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(namesTextField, gridBagConstraints);

        namesButton.setText("Search...");
        namesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namesButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(namesButton, gridBagConstraints);

        newMatrixFile_TextField.setColumns(35);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(newMatrixFile_TextField, gridBagConstraints);

        newMatrixFile_jButton.setText("Set Filename");
        newMatrixFile_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMatrixFile_jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(newMatrixFile_jButton, gridBagConstraints);

        convert_jButton.setText("Convert");
        convert_jButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convert_jButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(convert_jButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void distanceMatrixButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_distanceMatrixButtonActionPerformed
    int result = OpenDialog.showOpenDialog(new DMATFilter(), this);

    if (result == JFileChooser.APPROVE_OPTION) {
        String filename = OpenDialog.getFilename();
        this.distanceMatrixTextField.setText(filename);

        String newFilename = filename.substring(0, filename.lastIndexOf("\\") + 1);
        newFilename = newFilename + "NEW_" + filename.substring(filename.lastIndexOf("\\") + 1, filename.length());
        this.newMatrixFile_TextField.setText(newFilename);
    }
}//GEN-LAST:event_distanceMatrixButtonActionPerformed

private void namesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namesButtonActionPerformed
    int result = OpenDialog.showOpenDialog(new NAMESFilter(), this);

    if (result == JFileChooser.APPROVE_OPTION) {
        String filename = OpenDialog.getFilename();
        this.namesTextField.setText(filename);
    }
}//GEN-LAST:event_namesButtonActionPerformed

private void newMatrixFile_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMatrixFile_jButtonActionPerformed
// TODO add your handling code here:
    int result = SaveDialog.showSaveDialog(new DMATFilter(), this, "newMatrixFilename");
    if (result == JFileChooser.APPROVE_OPTION) {
        String filename = SaveDialog.getFilename();
        this.newMatrixFile_TextField.setText(filename);
    }
}//GEN-LAST:event_newMatrixFile_jButtonActionPerformed

private void convert_jButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convert_jButtonActionPerformed
// TODO add your handling code here:
    BufferedReader in = null;
    BufferedWriter out = null;

    try {
        Vector<String> names = Util.readOldNamesFile(this.namesTextField.getText());

        in = new BufferedReader(new java.io.FileReader(this.distanceMatrixTextField.getText()));
        String line = in.readLine();

        //The first line of the file is the scalar data
        StringTokenizer tCdata = new StringTokenizer(line, " \t");
        java.util.Vector<Float> cdata = new java.util.Vector<Float>();

        while (tCdata.hasMoreTokens()) {
            String token = tCdata.nextToken();
            cdata.add(Float.parseFloat(token));
        }
        int numberPoints = cdata.size();
        float[][] matrix = new float[numberPoints - 1][];
        int numberTerms = numberPoints - 1;

        for (int ins1 = 0; ins1 < (numberPoints - 1); ins1++) {
            matrix[ins1] = new float[numberTerms--];
        }

        int pointA = 0, pointB = 0;
        for (int i = 0; (line = in.readLine()) != null; i++) {
            int j = numberPoints - 1;
            StringTokenizer tDistance = new StringTokenizer(line, " \t");
            if (line.trim().length() > 0) {
                while (tDistance.hasMoreTokens()) {
                    String token = tDistance.nextToken();
                    //dmat.setDistance(i, j--, Float.parseFloat(token));
                    pointA = i;
                    pointB = j--;
                    if (pointA < pointB) {
                        matrix[pointA][Math.abs((pointB - (numberPoints - 1)))] = Float.parseFloat(token);
                    } else {
                        matrix[pointB][Math.abs((pointA - (numberPoints - 1)))] = Float.parseFloat(token);
                    }
                }
            }
        }

        //Creating the New Distance Matrix
        DistanceMatrix dmat = new DistanceMatrix(numberPoints);
        out = new BufferedWriter(new FileWriter(this.newMatrixFile_TextField.getText()));
        //Writting the names of the titles
        out.write(Integer.toString(numberPoints));
        out.write("\r\n");

        //writing the ids
        if (names != null) {
            for (int i = 0; i < names.size() - 1; i++) {
                out.write(names.get(i));
                out.write(";");
            }
            out.write(names.get(names.size() - 1));
            out.write("\r\n");
        } else {
            for (int i = 0; i < numberPoints - 1; i++) {
                out.write(Integer.toString(i) + ";");
            }
            out.write(Integer.toString(numberPoints - 1) + "\r\n");
        }

        //writing the cdata
        if (cdata != null) {
            for (int i = 0; i < cdata.size() - 1; i++) {
                out.write(cdata.get(i).toString());
                out.write(";");
            }
            out.write(cdata.get(cdata.size() - 1).toString());
            out.write("\r\n");
        } else {
            for (int i = 0; i < numberPoints - 1; i++) {
                out.write("0;");
            }

            out.write("0\r\n");
        }
        //creating new matrix
        float[][] newMatrix = new float[numberPoints - 1][];
        for (int i = 0; i < numberPoints - 1; i++) {
            newMatrix[i] = new float[i + 1];
        }
        
        //transfering data               
       for (int row=0; row<matrix.length; row++){           
           int sCol=numberPoints-2; //stored col
           for (int col=0; col<matrix[row].length; col++){
               newMatrix[sCol][row] = matrix[row][col];
               sCol--;
           }
       }
        
        for (int i = 0; i < newMatrix.length; i++) {
            for (int j = 0; j < newMatrix[i].length; j++) {
                out.write(Float.toString(newMatrix[i][j]));
                if (j < newMatrix[i].length - 1) {
                    out.write(";");
                }
            }
            out.write("\r\n");
        }

    } catch (FileNotFoundException e) {
        e.printStackTrace();
    //throw new java.io.IOException("File \"" + filename + "\" was not found!");
    } catch (IOException e) {
        e.printStackTrace();
    //throw new java.io.IOException("Problems reading the file \"" + filename + "\"");
    } finally {
        //fechar o arquivo
        if (in != null) {
            try {
                in.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        if (out != null) {
            try {
                out.flush();
                out.close();
            } catch (java.io.IOException ex) {
                ex.printStackTrace();
            }
        }
    }

}//GEN-LAST:event_convert_jButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DistanceMatrixConverterView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton convert_jButton;
    private javax.swing.JButton distanceMatrixButton;
    private javax.swing.JTextField distanceMatrixTextField;
    private javax.swing.JButton namesButton;
    private javax.swing.JLabel namesLabel;
    private javax.swing.JTextField namesTextField;
    private javax.swing.JLabel newDmatLabel;
    private javax.swing.JTextField newMatrixFile_TextField;
    private javax.swing.JButton newMatrixFile_jButton;
    private javax.swing.JLabel oldDmatLabel;
    // End of variables declaration//GEN-END:variables

}
