/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.wizard;

import java.awt.Dimension;
import javax.swing.JOptionPane;
import visualizer.graph.Graph;
import visualizer.view.ReportView;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class ProjectionWizardView extends javax.swing.JDialog {

    public static final int PROJECTION_CANCELED = 0;
    public static final int PROJECTION_GENERATED = 1;
    
    /** Creates new form CreatorDialogBase */
    private ProjectionWizardView(javax.swing.JFrame parent) {
        super(parent);
        initComponents();

        this.setPreferredSize(new Dimension(700, 600));
        this.setSize(700, 600);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        buttonPanel = new javax.swing.JPanel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        wizardTabbedPane = new javax.swing.JTabbedPane();
        processPanel = new javax.swing.JPanel();
        reportPanel = new ReportView();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Projection Wizard");
        setModal(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        buttonPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.RIGHT));

        previousButton.setText("<< Back");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(previousButton);

        nextButton.setText("Next >>");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(nextButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        wizardTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                wizardTabbedPaneStateChanged(evt);
            }
        });

        processPanel.setLayout(new java.awt.BorderLayout());

        wizardTabbedPane.addTab("Process", processPanel);

        wizardTabbedPane.addTab("Report", reportPanel);

        getContentPane().add(wizardTabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void wizardTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_wizardTabbedPaneStateChanged
        if (this.graph != null) {
            this.dataPanel.refreshData();
            ((ReportView) this.reportPanel).reset(this.graph.getProjectionData());
        }
    }//GEN-LAST:event_wizardTabbedPaneStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        this.exit = ProjectionWizardView.PROJECTION_CANCELED;
        this.process.stopProcess();
        this.setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        //Refreshing the data
        this.dataPanel.refreshData();

        if (this.dataPanel instanceof DataSourceChoice) {
            if (this.graph.getProjectionData().getSourceFile().trim().length() > 0) {
                this.definePanel(ProjectionWizardCore.NEXT_STATE);
            } else {
                JOptionPane.showMessageDialog(this,
                        "A corpus or points file or distance file must be provided!",
                        "Problems", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            this.definePanel(ProjectionWizardCore.NEXT_STATE);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        this.definePanel(ProjectionWizardCore.PREVIOUS_STATE);
    }//GEN-LAST:event_previousButtonActionPerformed

    public static ProjectionWizardView getInstance(javax.swing.JFrame parent) {
        if (instance == null) {
            instance = new ProjectionWizardView(parent);
        }
        return instance;
    }

    public int display(Graph graph) {
        this.exit = ProjectionWizardView.PROJECTION_GENERATED;
        this.graph = graph;
        this.process = new ProjectionWizardCore(graph);
        this.definePanel(ProjectionWizardCore.NEXT_STATE);

        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
        return this.exit;
    }

    private void definePanel(int direction) {
        //Getting the new panel
        WizardPanel newPanel = this.process.getNextPanel(direction);

        if (newPanel != null) {
            //Change the next/finish button label
            if (newPanel instanceof ProjectionView) {
                this.nextButton.setText("Finish");
            } else {
                this.nextButton.setText("Next >>");
            }

            this.nextButton.setEnabled(true);

            //Activate/Deactivate the previoues button
            if (newPanel instanceof DataSourceChoice) {
                this.previousButton.setEnabled(false);
            } else {
                this.previousButton.setEnabled(true);
            }

            //Remove the previous panel
            this.processPanel.removeAll();

            //Add this panel to the frame
            this.dataPanel = newPanel;
            this.processPanel.add(this.dataPanel);
            this.setLocationRelativeTo(this.getParent());
            this.dataPanel.repaint();
            this.validate();
        } else {
            this.nextButton.setEnabled(false);
            this.previousButton.setEnabled(false);
        }
    }

    public ProjectionWizardCore getProcess() {
        return process;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ProjectionWizardView(null).setVisible(true);
            }

        });
    }

    private Graph graph;
    private ProjectionWizardCore process;
    private int exit = ProjectionWizardView.PROJECTION_GENERATED;
    private static ProjectionWizardView instance;
    private WizardPanel dataPanel;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JPanel processPanel;
    private javax.swing.JPanel reportPanel;
    private javax.swing.JTabbedPane wizardTabbedPane;
    // End of variables declaration//GEN-END:variables
}
