/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.wizard;

import visualizer.projection.ProjectionData;
import visualizer.projection.SourceType;
import visualizer.datamining.clustering.HierarchicalClusteringType;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class GeneralParameters extends WizardPanel {

    /**
     * Creates new form GeneralParameters
     * @param projectionData 
     */
    public GeneralParameters(ProjectionData projectionData) {
        this.pdata = projectionData;
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        hcTypeButtonGroup = new javax.swing.ButtonGroup();
        knnConnectivityPanel = new javax.swing.JPanel();
        knnConnectivityLabel = new javax.swing.JLabel();
        knnConnectivityComboBox = new javax.swing.JComboBox();
        descriptionPanel = new javax.swing.JPanel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        hierarchicalClusteringPanel = new javax.swing.JPanel();
        slinkRadioButton = new javax.swing.JRadioButton();
        alinkRadioButton = new javax.swing.JRadioButton();
        hierarchicalClusteringCheckBox = new javax.swing.JCheckBox();
        clinkRadioButton = new javax.swing.JRadioButton();
        pointsLabelPanel = new javax.swing.JPanel();
        numberLinesComboBox = new javax.swing.JComboBox();
        linesFileLabel = new javax.swing.JLabel();
        triangulationPanel = new javax.swing.JPanel();
        delaunayCheckBox = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder("General Parameters"));
        setLayout(new java.awt.GridBagLayout());

        knnConnectivityPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("KNN Connectivity"));
        knnConnectivityPanel.setLayout(new java.awt.GridBagLayout());

        knnConnectivityLabel.setText("Number Neighbors");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        knnConnectivityPanel.add(knnConnectivityLabel, gridBagConstraints);

        knnConnectivityComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        knnConnectivityPanel.add(knnConnectivityComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(knnConnectivityPanel, gridBagConstraints);

        descriptionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Projection Description"));
        descriptionPanel.setMinimumSize(new java.awt.Dimension(200, 150));
        descriptionPanel.setLayout(new java.awt.BorderLayout());

        descriptionScrollPane.setMinimumSize(new java.awt.Dimension(150, 150));

        descriptionTextArea.setColumns(40);
        descriptionTextArea.setLineWrap(true);
        descriptionTextArea.setRows(10);
        descriptionTextArea.setWrapStyleWord(true);
        descriptionScrollPane.setViewportView(descriptionTextArea);

        descriptionPanel.add(descriptionScrollPane, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(descriptionPanel, gridBagConstraints);

        hierarchicalClusteringPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Hierarchical Clustering"));
        hierarchicalClusteringPanel.setLayout(new java.awt.GridBagLayout());

        hcTypeButtonGroup.add(slinkRadioButton);
        slinkRadioButton.setText("SLINK");
        slinkRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        slinkRadioButton.setEnabled(false);
        slinkRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 25, 3, 3);
        hierarchicalClusteringPanel.add(slinkRadioButton, gridBagConstraints);

        hcTypeButtonGroup.add(alinkRadioButton);
        alinkRadioButton.setText("ALINK");
        alinkRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        alinkRadioButton.setEnabled(false);
        alinkRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 25, 3, 3);
        hierarchicalClusteringPanel.add(alinkRadioButton, gridBagConstraints);

        hierarchicalClusteringCheckBox.setText("Create the Hierarchical Clustering scalar");
        hierarchicalClusteringCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        hierarchicalClusteringCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        hierarchicalClusteringCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hierarchicalClusteringCheckBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        hierarchicalClusteringPanel.add(hierarchicalClusteringCheckBox, gridBagConstraints);

        hcTypeButtonGroup.add(clinkRadioButton);
        clinkRadioButton.setSelected(true);
        clinkRadioButton.setText("CLINK");
        clinkRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        clinkRadioButton.setEnabled(false);
        clinkRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 25, 3, 3);
        hierarchicalClusteringPanel.add(clinkRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(hierarchicalClusteringPanel, gridBagConstraints);

        pointsLabelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Documents Label"));
        pointsLabelPanel.setLayout(new java.awt.GridBagLayout());

        numberLinesComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        pointsLabelPanel.add(numberLinesComboBox, gridBagConstraints);

        linesFileLabel.setText("Lines of file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        pointsLabelPanel.add(linesFileLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(pointsLabelPanel, gridBagConstraints);

        triangulationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Triangulation"));

        delaunayCheckBox.setText("Create Delaunay Triangulation");
        triangulationPanel.add(delaunayCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(triangulationPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    private void hierarchicalClusteringCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hierarchicalClusteringCheckBoxActionPerformed
        if (this.hierarchicalClusteringCheckBox.isSelected()) {
            this.alinkRadioButton.setEnabled(true);
            this.clinkRadioButton.setEnabled(true);
            this.slinkRadioButton.setEnabled(true);
        } else {
            this.alinkRadioButton.setEnabled(false);
            this.clinkRadioButton.setEnabled(false);
            this.slinkRadioButton.setEnabled(false);
        }
    }//GEN-LAST:event_hierarchicalClusteringCheckBoxActionPerformed

    public GeneralParameters reset() {
        if (this.pdata.getSourceType() == SourceType.CORPUS) {
            this.numberLinesComboBox.setEnabled(true);
        } else {
            this.numberLinesComboBox.setEnabled(false);
        }

        this.knnConnectivityComboBox.setSelectedIndex(this.pdata.getKnnNumberNeighbors());
        this.delaunayCheckBox.setSelected(this.pdata.isCreateDelaunay());

        return this;
    }

    public void refreshData() {
        this.pdata.setKnnNumberNeighbors(this.knnConnectivityComboBox.getSelectedIndex());
        this.pdata.setNumberLines(this.numberLinesComboBox.getSelectedIndex() + 1);
        this.pdata.setDescription(this.descriptionTextArea.getText());
        this.pdata.setCreateDelaunay(this.delaunayCheckBox.isSelected());

        if (this.hierarchicalClusteringCheckBox.isSelected()) {
            if (this.alinkRadioButton.isSelected()) {
                this.pdata.setHierarchicalClusteringType(HierarchicalClusteringType.ALINK);
            } else if (this.clinkRadioButton.isSelected()) {
                this.pdata.setHierarchicalClusteringType(HierarchicalClusteringType.CLINK);
            } else {
                this.pdata.setHierarchicalClusteringType(HierarchicalClusteringType.SLINK);
            }
        } else {
            this.pdata.setHierarchicalClusteringType(HierarchicalClusteringType.NONE);
        }

    }

    private ProjectionData pdata;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton alinkRadioButton;
    private javax.swing.JRadioButton clinkRadioButton;
    private javax.swing.JCheckBox delaunayCheckBox;
    private javax.swing.JPanel descriptionPanel;
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.ButtonGroup hcTypeButtonGroup;
    private javax.swing.JCheckBox hierarchicalClusteringCheckBox;
    private javax.swing.JPanel hierarchicalClusteringPanel;
    private javax.swing.JComboBox knnConnectivityComboBox;
    private javax.swing.JLabel knnConnectivityLabel;
    private javax.swing.JPanel knnConnectivityPanel;
    private javax.swing.JLabel linesFileLabel;
    private javax.swing.JComboBox numberLinesComboBox;
    private javax.swing.JPanel pointsLabelPanel;
    private javax.swing.JRadioButton slinkRadioButton;
    private javax.swing.JPanel triangulationPanel;
    // End of variables declaration//GEN-END:variables
}
