/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *
 * PEx is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.datamining.clustering;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import visualizer.graph.Graph;
import visualizer.graph.Scalar;
import visualizer.graph.Vertex;
import visualizer.matrix.Matrix;
import visualizer.projection.distance.Dissimilarity;
import visualizer.projection.distance.DissimilarityFactory;
import visualizer.projection.distance.DissimilarityType;
import visualizer.util.Util;

/**
 *
 * @author Fernando Vieira Paulovich
 */
public class SilhouetteCoefficientView extends javax.swing.JDialog {

    /** Creates new form SilhouetteCoefficientView */
    private SilhouetteCoefficientView(java.awt.Frame parent) {
        super(parent);
        initComponents();

        for (DissimilarityType disstype : DissimilarityType.getTypes()) {
            if (disstype != DissimilarityType.KOLMOGOROV && disstype != DissimilarityType.NONE) {
                this.distanceComboBox.addItem(disstype);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dataPanel = new javax.swing.JPanel();
        chooseDistanceTypePanel2 = new javax.swing.JPanel();
        distanceComboBox = new javax.swing.JComboBox();
        resultScrollPane = new javax.swing.JScrollPane();
        resultTextArea = new javax.swing.JTextArea();
        scalarPanel = new javax.swing.JPanel();
        scalarCheckBox = new javax.swing.JCheckBox();
        buttonPanel = new javax.swing.JPanel();
        generateButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Calculate the Silhouette");
        setModal(true);

        dataPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Data"));
        dataPanel.setLayout(new java.awt.GridBagLayout());

        chooseDistanceTypePanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Choose the Distance Type"));
        chooseDistanceTypePanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 3);
        chooseDistanceTypePanel2.add(distanceComboBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        dataPanel.add(chooseDistanceTypePanel2, gridBagConstraints);

        resultScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Result"));

        resultTextArea.setColumns(40);
        resultTextArea.setRows(8);
        resultScrollPane.setViewportView(resultTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        dataPanel.add(resultScrollPane, gridBagConstraints);

        scalarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Scalar"));

        scalarCheckBox.setSelected(true);
        scalarCheckBox.setText("Create scalars");
        scalarPanel.add(scalarCheckBox);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        dataPanel.add(scalarPanel, gridBagConstraints);

        getContentPane().add(dataPanel, java.awt.BorderLayout.CENTER);

        generateButton.setText("Generate");
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(generateButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public float[] getSilhouetteCoefficients(Graph graph, Matrix matrix) throws IOException {
        DissimilarityType mtype = (DissimilarityType) distanceComboBox.getSelectedItem();
        Dissimilarity diss = DissimilarityFactory.getInstance(mtype);

        SilhouetteCoefficient sc = new SilhouetteCoefficient();
        return sc.execute(matrix, diss);
    }
    
    
    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        try {
            if (graph != null && matrix != null) {
                DissimilarityType mtype = (DissimilarityType) distanceComboBox.getSelectedItem();
                Dissimilarity diss = DissimilarityFactory.getInstance(mtype);

                SilhouetteCoefficient sc = new SilhouetteCoefficient();
                float[] silhouette = sc.execute(matrix, diss);
                
                //showing the average silhouette on console
                float average = sc.average(silhouette);
                resultTextArea.append("Silhouette coefficient: " + average + "\r\n");
                resultTextArea.append("---\r\n");

                //create the scalars
                if (scalarCheckBox.isSelected()) {
                    createScalars(silhouette);
                }
            } else {
                JOptionPane.showMessageDialog(this, "A projection must be provided.",
                        "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
}//GEN-LAST:event_generateButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
}//GEN-LAST:event_closeButtonActionPerformed

    public static SilhouetteCoefficientView getInstance(javax.swing.JFrame parent) {
        return new SilhouetteCoefficientView(parent);
    }

    public void display(Graph graph, Scalar scalar) throws IOException {
        this.graph = graph;
        this.matrix = Util.exportProjection(graph, scalar);

        this.pack();
        this.setLocationRelativeTo(this.getParent());
        this.setVisible(true);
    }

    private void createScalars(float[] silhouette) throws IOException {
        //normalize the silhouette (we know that it can be between -1 and 1)
        for (int i = 0; i < silhouette.length; i++) {
            silhouette[i] = (silhouette[i] + 1) / 2;
        }

        //calculating the average silhouette of each cluster
        float[] cdata = matrix.getClassData();

        ArrayList<Float> cdata_index = new ArrayList<Float>();
        for (int i = 0; i < cdata.length; i++) {
            if (!cdata_index.contains(cdata[i])) {
                cdata_index.add(cdata[i]);
            }
        }

        int[] cluster_id = new int[cdata.length];
        for (int i = 0; i < cdata.length; i++) {
            int index = cdata_index.indexOf(cdata[i]);
            cluster_id[i] = index;
        }

        float[] clsilhaverage = new float[cdata_index.size()];
        int[] nrel = new int[cdata_index.size()];
        Arrays.fill(nrel, 0);
        Arrays.fill(clsilhaverage, 0.0f);

        for (int i = 0; i < cdata.length; i++) {
            int index = cdata_index.indexOf(cdata[i]);
            clsilhaverage[index] += silhouette[i];
            nrel[index]++;
        }

        float[] clsilhouette = new float[cdata.length];
        for (int i = 0; i < cdata.length; i++) {
            int index = cdata_index.indexOf(cdata[i]);
            clsilhouette[i] = clsilhaverage[index] / nrel[index];
        }

        //calculating the normalized silhouette
        float[] normsilhouette = new float[silhouette.length];
        float max = Float.NEGATIVE_INFINITY;
        float min = Float.POSITIVE_INFINITY;
        for (int i = 0; i < silhouette.length; i++) {
            if (max < silhouette[i]) {
                max = silhouette[i];
            }

            if (min > silhouette[i]) {
                min = silhouette[i];
            }
        }

        for (int i = 0; i < silhouette.length; i++) {
            normsilhouette[i] = (silhouette[i] - min) / (max - min);
        }

        //calculating the normalized cluster silhouette
        float[] normclsilhouette = new float[silhouette.length];
        max = Float.NEGATIVE_INFINITY;
        min = Float.POSITIVE_INFINITY;
        for (int i = 0; i < clsilhouette.length; i++) {
            if (max < clsilhouette[i]) {
                max = clsilhouette[i];
            }

            if (min > clsilhouette[i]) {
                min = clsilhouette[i];
            }
        }

        for (int i = 0; i < clsilhouette.length; i++) {
            normclsilhouette[i] = (clsilhouette[i] - min) / (max - min);
        }

        //creating the scalars
        Scalar silh = graph.addScalar("silhouette");
        Scalar nsilh = graph.addScalar("normalized silhouette");
        Scalar clsilh = graph.addScalar("cluster silhouette");
        Scalar nclsilh = graph.addScalar("normalized cluster silhouette");

        ArrayList<Vertex> vertex = graph.getVertex();
        for (int i = 0; i < vertex.size(); i++) {
            Vertex v = vertex.get(i);

            v.setScalar(silh, silhouette[i]);
            v.setScalar(nsilh, normsilhouette[i]);
            v.setScalar(clsilh, clsilhouette[i]);
            v.setScalar(nclsilh, normclsilhouette[i]);
        }
    }

    private Graph graph;
    private Matrix matrix;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel chooseDistanceTypePanel2;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel dataPanel;
    private javax.swing.JComboBox distanceComboBox;
    private javax.swing.JButton generateButton;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JTextArea resultTextArea;
    private javax.swing.JCheckBox scalarCheckBox;
    private javax.swing.JPanel scalarPanel;
    // End of variables declaration//GEN-END:variables
}
