/* ***** BEGIN LICENSE BLOCK *****
 *
 * Copyright (c) 2005-2007 Universidade de Sao Paulo, Sao Carlos/SP, Brazil.
 * All Rights Reserved.
 *
 * This file is part of Projection Explorer (PEx).
 *
 * How to cite this work:
 *  
@inproceedings{paulovich2007pex,
author = {Fernando V. Paulovich and Maria Cristina F. Oliveira and Rosane 
Minghim},
title = {The Projection Explorer: A Flexible Tool for Projection-based 
Multidimensional Visualization},
booktitle = {SIBGRAPI '07: Proceedings of the XX Brazilian Symposium on 
Computer Graphics and Image Processing (SIBGRAPI 2007)},
year = {2007},
isbn = {0-7695-2996-8},
pages = {27--34},
doi = {http://dx.doi.org/10.1109/SIBGRAPI.2007.39},
publisher = {IEEE Computer Society},
address = {Washington, DC, USA},
}
 *  
 * PEx is free software: you can redistribute it and/or modify it under 
 * the terms of the GNU General Public License as published by the Free 
 * Software Foundation, either version 3 of the License, or (at your option) 
 * any later version.
 *
 * PEx is distributed in the hope that it will be useful, but WITHOUT 
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY 
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License 
 * for more details.
 *
 * This code was developed by members of Computer Graphics and Image
 * Processing Group (http://www.lcad.icmc.usp.br) at Instituto de Ciencias
 * Matematicas e de Computacao - ICMC - (http://www.icmc.usp.br) of 
 * Universidade de Sao Paulo, Sao Carlos/SP, Brazil. The initial developer 
 * of the original code is Fernando Vieira Paulovich <fpaulovich@gmail.com>.
 *
 * Contributor(s): Rosane Minghim <rminghim@icmc.usp.br>
 *
 * You should have received a copy of the GNU General Public License along 
 * with PEx. If not, see <http://www.gnu.org/licenses/>.
 *
 * ***** END LICENSE BLOCK ***** */

package visualizer.datamining.dataanalysis;

import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 *
 * @author  Fernando Vieira Paulovich
 */
public class MessageDialog extends javax.swing.JDialog {

    /** Creates new form MessageDialog */
    private MessageDialog(javax.swing.JDialog parent) {
        super(parent);
        initComponents();
    }

    private MessageDialog(javax.swing.JFrame parent) {
        super(parent);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        messagePanel = new javax.swing.JPanel();
        processingProgressBar = new javax.swing.JProgressBar();
        processingLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Processing");
        setResizable(false);

        messagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Wait a moment"));
        messagePanel.setLayout(new java.awt.GridBagLayout());

        processingProgressBar.setIndeterminate(true);
        processingProgressBar.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        messagePanel.add(processingProgressBar, gridBagConstraints);

        processingLabel.setText("processing...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        messagePanel.add(processingLabel, gridBagConstraints);

        getContentPane().add(messagePanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public static MessageDialog show(java.awt.Container parent, String message) {
        MessageDialog ms = null;

        if (parent instanceof JFrame) {
            ms = new MessageDialog((JFrame) parent);
            ms.setLocationRelativeTo(ms.getParent());
            ms.processingLabel.setText(message);
            ms.pack();
            ms.setVisible(true);
        } else if (parent instanceof JDialog) {
            ms = new MessageDialog((JDialog) parent);
            ms.setLocationRelativeTo(ms.getParent());
            ms.processingLabel.setText(message);
            ms.pack();
            ms.setVisible(true);
        }

        return ms;
    }

    public void setMessage(String message) {
        this.processingLabel.setText(message);
    }

    public void close() {
        this.setVisible(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MessageDialog(new javax.swing.JDialog()).setVisible(true);
            }

        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel messagePanel;
    private javax.swing.JLabel processingLabel;
    private javax.swing.JProgressBar processingProgressBar;
    // End of variables declaration//GEN-END:variables
}
